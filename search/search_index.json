{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Detecting and dissecting anomalous anatomic regions in spatial transcriptomics with STANDS","text":"<p>We introduce Spatial Transcriptomics ANomaly Detection and Subtyping (STANDS), an innovative computational method capable of integrating multimodal information, e.g., spatial gene expression, histology image and single cell gene expression, to not only delineate anomalous tissue regions but also reveal their compositional heterogeneities across multi-sample spatial transcriptomics (ST) data. </p> <p></p>"},{"location":"#outline-of-ddatd","title":"Outline of DDATD","text":"<p>The accurate detection of anomalous anatomic regions, followed by their dissection into biologically heterogeneous subdomains across multiple tissue slices, is of paramount importance in clinical diagnostics, targeted therapies and biomedical research. This procedure, which we refer to as Detection and Dissection of Anomalous Tissue Domains (DDATD), serves as the first and foremost step in a comprehensive analysis of tissues harvested from affected individuals for revealing population-level and individual-specific factors (e.g., pathogenic cell types) associated with disease developments. </p> <p></p>"},{"location":"#framework-of-stands","title":"Framework of STANDS","text":"<p>STANDS is an innovative framework built on a suite of specialized Generative Adversarial Networks (GANs) for seamlessly integrating the three tasks of DDATD. The framework consists of three components. </p> <p>Component I (C1) trains a GAN model on the reference dataset, learning to reconstruct normal spots from their multimodal representations of both spatial transcriptomics data and associated histology image. Subsequently, the model is applied on the target datasets to identify anomalous spots as those with unexpectedly large reconstruction deviances, namely anomaly scores.</p> <p>Component II (C2) aims at diminishing the non-biological variations (e.g. batch effects) among anomalies via aligning target datasets in a common space. It employs two cooperative GAN models to identify pairs of reference and target spots that share similar biological contents, based on which the target datasets are aligned to the reference data space via \u201cstyle-transfer\u201d.</p> <p>Component III (C3) fuses the embeddings and reconstruction residuals of aligned anomalous spots to serve as inputs to an iterative clustering algorithm which groups anomalies into distinct subtypes.  </p> <p></p>"},{"location":"#source-codes","title":"Source codes","text":"<p>All the source codes of STANDS are available on STANDS. We also provide API documentation to help you understand the code and functionality of STANDS.</p>"},{"location":"#contributors","title":"Contributors","text":"<ul> <li>Kaichen Xu: Lead Developer, implement STANDS and design this website.</li> <li>Yan Lu: Developer, implement the novel Gaussian Mixture Model.</li> <li>Yihang Du: Developer, implement the Spatial Grouping Discrepancy metrics.</li> <li>Kainan Liu: Developer, have diverse contributions.</li> <li>Xiaobo Sun &amp; lab: provide guidance, support and environment.</li> </ul>"},{"location":"#citation","title":"Citation","text":"<p>Coming soon.</p>"},{"location":"license/","title":"GNU GENERAL PUBLIC LICENSE","text":"<p>Version 3, 29 June 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"license/#preamble","title":"Preamble","text":"<p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"license/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"license/#0-definitions","title":"0. Definitions.","text":"<p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"license/#1-source-code","title":"1. Source Code.","text":"<p>The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"license/#2-basic-permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"license/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users' Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p>"},{"location":"license/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"license/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified     it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is     released under this License and any conditions added under     section 7. This requirement modifies the requirement in section 4     to \"keep intact all notices\".</li> <li>c) You must license the entire work, as a whole, under this     License to anyone who comes into possession of a copy. This     License will therefore apply, along with any applicable section 7     additional terms, to the whole of the work, and all its parts,     regardless of how they are packaged. This License gives no     permission to license the work in any other way, but it does not     invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display     Appropriate Legal Notices; however, if the Program has interactive     interfaces that do not display Appropriate Legal Notices, your     work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"license/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by the     Corresponding Source fixed on a durable physical medium     customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product     (including a physical distribution medium), accompanied by a     written offer, valid for at least three years and valid for as     long as you offer spare parts or customer support for that product     model, to give anyone who possesses the object code either (1) a     copy of the Corresponding Source for all the software in the     product that is covered by this License, on a durable physical     medium customarily used for software interchange, for a price no     more than your reasonable cost of physically performing this     conveying of source, or (2) access to copy the Corresponding     Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the     written offer to provide the Corresponding Source. This     alternative is allowed only occasionally and noncommercially, and     only if you received the object code with such an offer, in accord     with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated     place (gratis or for a charge), and offer equivalent access to the     Corresponding Source in the same way through the same place at no     further charge. You need not require recipients to copy the     Corresponding Source along with the object code. If the place to     copy the object code is a network server, the Corresponding Source     may be on a different server (operated by you or a third party)     that supports equivalent copying facilities, provided you maintain     clear directions next to the object code saying where to find the     Corresponding Source. Regardless of what server hosts the     Corresponding Source, you remain obligated to ensure that it is     available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,     provided you inform other peers where the object code and     Corresponding Source of the work are being offered to the general     public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"license/#7-additional-terms","title":"7. Additional Terms.","text":"<p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the     terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or     author attributions in that material or in the Appropriate Legal     Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,     or requiring that modified versions of such material be marked in     reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors     or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some     trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that     material by anyone who conveys the material (or modified versions     of it) with contractual assumptions of liability to the recipient,     for any liability that these contractual assumptions directly     impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"license/#8-termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"license/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"license/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"license/#11-patents","title":"11. Patents.","text":"<p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"license/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others' Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"license/#13-use-with-the-gnu-affero-general-public-license","title":"13. Use with the GNU Affero General Public License.","text":"<p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p>"},{"location":"license/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"license/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"license/#16-limitation-of-liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"license/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"license/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands `show w' and `show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\".</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html.</p>"},{"location":"start/","title":"Preparations","text":"<p>STANDS is a powerful documentation framework to detect, align and subtyping anomalous tissue domains across multiple samples. In the subsequent sections, we will introduce the preparatory tasks before utilizing STANDS for your research, including the installation of Python packages, downloading of datasets, and other related procedures.</p>"},{"location":"start/#installation","title":"Installation","text":"<p>STANDS is developed as a Python package. You will need to install Python, and the recommended version is Python 3.9.5.</p> <p>You can download the package from GitHub and install it locally:</p> <pre><code>git clone https://github.com/Catchxu/STANDS.git\ncd STANDS/\npython3 setup.py install\n</code></pre>"},{"location":"start/#datasets","title":"Datasets","text":"<p>All experimental datasets involved in this paper are available from their respective original sources: the 10x-Visium datasets of healthy human breast tissues (10x-hNB datasets) are available at CELLxGENE; The 10x-Visium datasets of human breast cancer tissues (10x-hBC datasets) are available at github; The 10x-Visium datasets of human primary sclerosing cholangitis tissue (10x-hPSC datasets) and human liver caudate lobe tissue are available at CELLxGENE; The 10x-Visium datasets of human renal cell cancer tissue (10x-hRCC datasets) are available at Gene Expression Omnibus; The scRNA-seq dataset of human pancreatic ductal (sc-hPD) and 10x-Visium datasets of the human pancreatic ductal adenocarcinomas (10x-hPDAC) are available at Gene Expression Omnibus; The slide-seqV2 datasets of mouse embryo tissues (ssq-mEmb datasets) are available at CELLxGENE; The Stereo-seq datasets of mouse embryo tissue (Stereo-mEmb datasets) are available at STOmicsDB. We also provide organized and processed small datasets to demo the our code and tutorials. You can download the demo datasets from Google Drive.</p>"},{"location":"start/#getting-help","title":"Getting help","text":"<p>See the tutorial for more complete documentation of all the functions of STANDS. For questions or comments, please use the GitHub issues.</p>"},{"location":"start/#tested-environment","title":"Tested environment","text":""},{"location":"start/#environment-1","title":"Environment 1","text":"<ul> <li>CPU: Intel(R) Xeon(R) Platinum 8255C CPU @ 2.50GHz</li> <li>Memory: 256 GB</li> <li>System: Ubuntu 20.04.5 LTS</li> <li>Python: 3.9.15</li> </ul>"},{"location":"start/#environment-2","title":"Environment 2","text":"<ul> <li>CPU: Intel(R) Xeon(R) Gold 6240R CPU @ 2.40GHz</li> <li>Memory: 256 GB</li> <li>System: Ubuntu 22.04.3 LTS</li> <li>Python: 3.9.18</li> </ul>"},{"location":"start/#dependencies","title":"Dependencies","text":"<ul> <li>anndata&gt;=0.10.7</li> <li>dgl&gt;=2.1.0</li> <li>networkx&gt;=3.2.1</li> <li>numpy&gt;=1.22.4</li> <li>pandas&gt;=1.5.1</li> <li>Pillow&gt;=9.4.0</li> <li>PuLP&gt;=2.7.0</li> <li>pyemd&gt;=1.0.0</li> <li>rpy2&gt;=3.5.13</li> <li>scanpy&gt;=1.10.1</li> <li>scikit_learn&gt;=1.2.0</li> <li>scipy&gt;=1.11.4</li> <li>torch&gt;=2.0.0</li> <li>torchvision&gt;=0.15.1</li> <li>tqdm&gt;=4.64.1</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> stands<ul> <li> align</li> <li> anomaly</li> <li> configs</li> <li> evaluate<ul> <li> eval</li> <li> SGD</li> </ul> </li> <li> model<ul> <li> backbone<ul> <li> extractor</li> <li> gene</li> <li> image</li> <li> layer</li> </ul> </li> <li> cluster</li> <li> discriminator</li> <li> generator</li> <li> GMM</li> </ul> </li> <li> pretrain</li> <li> subtype</li> </ul> </li> </ul>"},{"location":"reference/stands/","title":"Index","text":""},{"location":"reference/stands/#stands","title":"stands","text":"<p>Spatial Transcriptomics ANomaly Detection and Subtyping (STANDS) is an innovative computational method  to detect anomalous tissue domains from multi-sample spatial transcriptomics (ST) data and reveal  their biologically heterogeneous subdomains, which can be individual-specific or shared by all  individuals. </p> <p>Detecting and characterizing anomalous anatomic regions from tissue samples from affected individuals  are crucial for clinical and biomedical research. This procedure, which we refer to as Detection and  Dissection of Anomalous Tissue Domains (DDATD), serves as the first and foremost step in the analysis  of clinical tissues because it reveals factors, such as pathogenic or differentiated cell types,  associated with the development of diseases or biological traits. Traditionally, DDATD has relied on  either laborious expert visual inspection or computer vision algorithms applied to histology images.  ST provides an unprecedent opportunity to enhance DDATD by incorporating spatial gene expression  information. However, to the best of our knowledge, no existing methods can perform de novo DDATD from  ST datasets.</p> <p>STANDS is built on state-of-the-art generative models for de novo DDATD from multi-sample ST by  integrating multimodal information including spatial gene expression, histology image, and single cell  gene expression. STANDS concurrently fulfills DDATD's three sequential core tasks: detecting, aligning,  and subtyping anomalous tissue domains across multiple samples. STANDS first integrates and harnesses  multimodal information from spatial transcriptomics and associated histology images to pinpoint  anomalous tissue regions across multiple target datasets. Next, STANDS aligns anomalies identified  from target datasets in a common data space via style-transfer learning to mitigate their  non-biological variations. Finally, STANDS dissects aligned anomalies into biologically heterogenous  subtypes that are either common or unique to the target datasets. STANDS combines these processes  into a unified framework that maintains the methodological coherence, which leads to its unparallel  performances in DDATD from multi-sample ST.</p> <p>Modules:</p> Name Description <code>read</code> <p>Read single spatial data and preprocess if required.</p> <code>read_cross</code> <p>Read spatial data from two sources and preprocess if required.</p> <code>read_multi</code> <p>Read multiple spatial datasets and preprocess if required.</p> <code>pretrain</code> <p>Pretrain STANDS using spatial data.</p> <code>evaluate</code> <p>Calculate various metrics (including SGD).</p>"},{"location":"reference/stands/#stands.AnomalyDetect","title":"AnomalyDetect","text":"<pre><code>AnomalyDetect(\nn_epochs: int = 10,\nbatch_size: int = 128,\nlearning_rate: float = 0.0003,\nn_dis: int = 2,\nGPU: Union[bool, str] = True,\nrandom_state: Optional[int] = None,\nweight: Optional[Dict[str, float]] = None,\n)\n</code></pre> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>def __init__(self, \nn_epochs: int = 10, \nbatch_size: int = 128,\nlearning_rate: float = 3e-4,\nn_dis: int = 2,\nGPU: Union[bool, str] = True,\nrandom_state: Optional[int] = None,\nweight: Optional[Dict[str, float]] = None):\nself.n_epochs = n_epochs\nself.batch_size = batch_size\nself.lr = learning_rate\nself.n_dis = n_dis\nself.device = select_device(GPU)\nif random_state is not None:\nseed_everything(random_state)\nif weight is None:\nweight = {'w_rec': 30, 'w_adv': 1, 'w_gp': 10}\nself.weight = weight\n</code></pre>"},{"location":"reference/stands/#stands.AnomalyDetect.UpdateD","title":"UpdateD","text":"<pre><code>UpdateD(blocks)\n</code></pre> <p>Updating discriminator</p> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>def UpdateD(self, blocks):\n'''Updating discriminator'''\nself.opt_D.zero_grad()\nif self.only_ST:\n# generate fake data\n_, fake_g = self.G.STforward(blocks, blocks[0].srcdata['gene'])\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\nd1 = torch.mean(self.D.SCforward(real_g))\nd2 = torch.mean(self.D.SCforward(fake_g.detach()))\ngp = calculate_gradient_penalty(self.D, real_g, fake_g.detach())\nelse:\n_, fake_g, fake_p = self.G.Fullforward(\nblocks, blocks[0].srcdata['gene'], blocks[1].srcdata['patch']\n)\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\nreal_p = blocks[1].dstdata['patch']\nd1 = torch.mean(self.D.Fullforward(real_g, real_p))\nd2 = torch.mean(self.D.Fullforward(fake_g.detach(), fake_p.detach()))\ngp = calculate_gradient_penalty(\nself.D, real_g, fake_g.detach(), real_p, fake_p.detach()\n)            \n# store discriminator loss for printing training information\nself.D_loss = - d1 + d2 + gp * self.weight['w_gp']\nself.D_loss.backward()\nself.opt_D.step()\n</code></pre>"},{"location":"reference/stands/#stands.AnomalyDetect.UpdateG","title":"UpdateG","text":"<pre><code>UpdateG(blocks)\n</code></pre> <p>Updating generator</p> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>def UpdateG(self, blocks):\n'''Updating generator'''\nself.opt_G.zero_grad()\nif self.only_ST:\n# generate fake data\nz, fake_g = self.G.STforward(blocks, blocks[0].srcdata['gene'])\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\n# discriminator provides feedback\nd = self.D.SCforward(fake_g)\nLoss_rec = self.L1(real_g, fake_g)\nLoss_adv = - torch.mean(d)\nelse:\nz, fake_g, fake_p = self.G.Fullforward(\nblocks, blocks[0].srcdata['gene'], blocks[1].srcdata['patch']\n)\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\nreal_p = blocks[1].dstdata['patch']\n# discriminator provides feedback\nd = self.D.Fullforward(fake_g, fake_p)\nLoss_rec = (self.L1(real_g, fake_g)+self.L1(real_p, fake_p))/2\nLoss_adv = - torch.mean(d)\n# store generator loss for printing training information and backward\nself.G_loss = self.weight['w_rec'] * Loss_rec + self.weight['w_adv'] * Loss_adv\nself.G_loss.backward()\nself.opt_G.step()\n# updating memory block with generated embeddings, fake_z\nself.G.Memory.update_mem(z)\n</code></pre>"},{"location":"reference/stands/#stands.AnomalyDetect.fit","title":"fit","text":"<pre><code>fit(\nref: Dict[str, Any],\nonly_ST: bool = False,\nweight_dir: Optional[str] = None,\n)\n</code></pre> <p>Train STANDS on reference graph</p> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>def fit(self, ref: Dict[str, Any], only_ST: bool = False, weight_dir: Optional[str] = None):\n'''Train STANDS on reference graph'''\ntqdm.write('Begin to train the model on reference datasets...')\n# dataset provides subgraph for training\nref_g = ref['graph']\nself.sampler = dgl.dataloading.MultiLayerFullNeighborSampler(2)\nself.dataset = dgl.dataloading.DataLoader(\nref_g, ref_g.nodes(), self.sampler, batch_size=self.batch_size, \nshuffle=True, drop_last=True, num_workers=0, device=self.device\n)\nself.only_ST = only_ST\nself.init_model(ref, weight_dir)\nself.G.train()\nself.D.train()\nwith tqdm(total=self.n_epochs) as t:\nfor _ in range(self.n_epochs):\nt.set_description(f'Train Epochs')\nfor _, _, blocks in self.dataset:\n# Update discriminator for n_dis times\nfor _ in range(self.n_dis):\nself.UpdateD(blocks)\n# Update generator for one time\nself.UpdateG(blocks)\n# Update learning rate for G and D\nself.D_sch.step()\nself.G_sch.step()\nt.set_postfix(G_Loss = self.G_loss.item(),\nD_Loss = self.D_loss.item())\nt.update(1)\ntqdm.write('Training has been finished.')\n</code></pre>"},{"location":"reference/stands/#stands.AnomalyDetect.init_weight","title":"init_weight","text":"<pre><code>init_weight(weight_dir)\n</code></pre> <p>Initial stage for pretrained weights and memory block</p> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>@torch.no_grad()\ndef init_weight(self, weight_dir):\n'''Initial stage for pretrained weights and memory block'''\nself.G.extract.load_weight(weight_dir)\n# Initial the memory block with the normal embeddings\nsum_t = self.G.Memory.mem_dim/self.batch_size\nt = 0\nwhile t &lt; sum_t:\nfor _, _, blocks in self.dataset:\nif self.only_ST:\nreal_g = blocks[0].srcdata['gene']\nz, _ = self.G.STforward(blocks, real_g)\nelse:\nreal_g = blocks[0].srcdata['gene']\nreal_p = blocks[1].srcdata['patch']\nz, _, _ = self.G.Fullforward(blocks, real_g, real_p)\nself.G.Memory.update_mem(z)\nt += 1\n</code></pre>"},{"location":"reference/stands/#stands.AnomalyDetect.predict","title":"predict","text":"<pre><code>predict(tgt: Dict[str, Any], run_gmm: bool = True)\n</code></pre> <p>Detect anomalous spots on target graph</p> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>@torch.no_grad()\ndef predict(self, tgt: Dict[str, Any], run_gmm: bool = True):\n'''Detect anomalous spots on target graph'''\ntgt_g = tgt['graph']\ndataset = dgl.dataloading.DataLoader(\ntgt_g, tgt_g.nodes(), self.sampler, batch_size=self.batch_size, \nshuffle=False, drop_last=False, num_workers=0, device=self.device\n)\nself.G.eval()\nself.D.eval()\ntqdm.write('Detect anomalous spots on target dataset...')\nref_score = self.score(self.dataset)\ntgt_score = self.score(dataset)\ntqdm.write('Anomalous spots have been detected.\\n')\nif run_gmm:\ngmm = GMMWithPrior(ref_score)\nthreshold = gmm.fit(tgt_score=tgt_score)\ntgt_label = [1 if s &gt;= threshold else 0 for s in tgt_score]\nreturn tgt_score, tgt_label\nelse:\nreturn tgt_score\n</code></pre>"},{"location":"reference/stands/#stands.BatchAlign","title":"BatchAlign","text":"<pre><code>BatchAlign(\nn_epochs: int = 10,\nbatch_size: int = 128,\nlearning_rate: float = 0.0003,\nn_dis: int = 3,\nGPU: Union[bool, str] = True,\nrandom_state: Optional[int] = None,\nweight: Optional[Dict[str, float]] = None,\n)\n</code></pre> Source code in <code>src\\stands\\align.py</code> <pre><code>def __init__(self, \nn_epochs: int = 10, \nbatch_size: int = 128,\nlearning_rate: float = 3e-4, \nn_dis: int = 3,\nGPU: Union[bool, str] = True, \nrandom_state: Optional[int] = None,\nweight: Optional[Dict[str, float]] = None):\nself.n_epochs = n_epochs\nself.batch_size = batch_size\nself.lr = learning_rate\nself.n_dis = n_dis\nself.device = select_device(GPU)\nself.GPU = GPU\nself.seed = random_state\nif random_state is not None:\nseed_everything(random_state)\nif weight is None:\nweight = {'w_rec': 30, 'w_adv': 1, 'w_gp': 10}\nself.weight = weight\n</code></pre>"},{"location":"reference/stands/#stands.BatchAlign.UpdateD","title":"UpdateD","text":"<pre><code>UpdateD(blocks)\n</code></pre> <p>Updating discriminator</p> Source code in <code>src\\stands\\align.py</code> <pre><code>def UpdateD(self, blocks):\n'''Updating discriminator'''\nself.opt_D.zero_grad()\n# generate fake data\nbatchid = blocks[-1].dstdata['batch']\nfake_g = self.G.STforward(blocks, blocks[0].srcdata['gene'], batchid)\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\nd1 = torch.mean(self.D.SCforward(real_g))\nd2 = torch.mean(self.D.SCforward(fake_g.detach()))\ngp = calculate_gradient_penalty(self.D, real_g, fake_g.detach())         \n# store discriminator loss for printing training information\nself.D_loss = - d1 + d2 + gp * self.weight['w_gp']\nself.D_loss.backward()\nself.opt_D.step()\n</code></pre>"},{"location":"reference/stands/#stands.BatchAlign.UpdateG","title":"UpdateG","text":"<pre><code>UpdateG(blocks)\n</code></pre> <p>Updating generator</p> Source code in <code>src\\stands\\align.py</code> <pre><code>def UpdateG(self, blocks):\n'''Updating generator'''\nself.opt_G.zero_grad()\n# generate fake data\nbatchid = blocks[-1].dstdata['batch']\nfake_g = self.G.STforward(blocks, blocks[0].srcdata['gene'], batchid)\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\n# discriminator provides feedback\nd = self.D.SCforward(fake_g)\nLoss_rec = self.L1(real_g, fake_g)\nLoss_adv = - torch.mean(d)\n# store generator loss for printing training information and backward\nself.G_loss = self.weight['w_rec']*Loss_rec + self.weight['w_adv']*Loss_adv\nself.G_loss.backward()\nself.opt_G.step()\n</code></pre>"},{"location":"reference/stands/#stands.BatchAlign.fit","title":"fit","text":"<pre><code>fit(\nraw: Dict[str, Any],\ngenerator: GeneratorAD,\n**alignerkwargs\n)\n</code></pre> <p>Remove batch effects</p> Source code in <code>src\\stands\\align.py</code> <pre><code>def fit(self, raw: Dict[str, Any], generator: GeneratorAD, **alignerkwargs):\n'''Remove batch effects'''\nadatas = raw['adata']\nadata_ref = adatas[0]\nadata_tgt = ad.concat(adatas[1:])\n# find Kin Pairs\nAligner = FindPairs(GPU=self.GPU, random_state=self.seed, **alignerkwargs)\n_, tgt_g = Aligner.fit(generator, raw)\nself.sampler = dgl.dataloading.MultiLayerFullNeighborSampler(2)\nself.dataset = dgl.dataloading.DataLoader(\ntgt_g, tgt_g.nodes(), self.sampler, batch_size=self.batch_size, \nshuffle=True, drop_last=False, num_workers=0, device=self.device\n)\nself.init_model(raw, generator)\ntqdm.write('Begin to correct spatial transcriptomics datasets...')\nself.G.train()\nself.D.train()\nwith tqdm(total=self.n_epochs) as t:\nfor _ in range(self.n_epochs):\nt.set_description(f'Train Epochs')\nfor _, _, blocks in self.dataset:\n# Update discriminator for n_dis times\nfor _ in range(self.n_dis):\nself.UpdateD(blocks)\n# Update generator for one time\nself.UpdateG(blocks)\n# Update learning rate for G and D\nself.D_sch.step()\nself.G_sch.step()\nt.set_postfix(G_Loss = self.G_loss.item(),\nD_Loss = self.D_loss.item())\nt.update(1)\nself.dataset = dgl.dataloading.DataLoader(\ntgt_g, tgt_g.nodes(), self.sampler, batch_size=self.batch_size, \nshuffle=False, drop_last=False, num_workers=0, device=self.device\n)\nself.G.eval()\ncorrected = []\nwith torch.no_grad():\nfor _, _, blocks in self.dataset:\nfake_g = self.G.STforward(\nblocks, blocks[0].srcdata['gene'], blocks[-1].dstdata['batch']\n)\ncorrected.append(fake_g.cpu().detach())\ncorrected = torch.cat(corrected, dim=0).numpy()\nadata_tgt.X = corrected\nadata = ad.concat([adata_ref, adata_tgt])\ntqdm.write('Datasets have been corrected.\\n')\nreturn adata\n</code></pre>"},{"location":"reference/stands/#stands.read_cross","title":"read_cross","text":"<pre><code>read_cross(\nref: ad.AnnData,\ntgt: ad.AnnData,\nspa_key: str = \"spatial\",\npreprocess: bool = True,\nn_genes: int = 3000,\npatch_size: Optional[int] = None,\nn_neighbors: int = 4,\naugment: bool = True,\nreturn_type: Literal[\"anndata\", \"graph\"] = \"graph\",\n)\n</code></pre> <p>Read spatial data from two sources and preprocess if required. The read data are transformed to reference and target graph.</p> <p>Parameters:</p> Name Type Description Default <code>ref</code> <code>AnnData</code> <p>Reference AnnData object.</p> required <code>tgt</code> <code>AnnData</code> <p>Target AnnData object.</p> required <code>spa_key</code> <code>str</code> <p>Key for spatial information in AnnData objects.</p> <code>'spatial'</code> <code>preprocess</code> <code>bool</code> <p>Perform data preprocessing.</p> <code>True</code> <code>n_genes</code> <code>int</code> <p>Number of genes for feature selection.</p> <code>3000</code> <code>patch_size</code> <code>Optional[int]</code> <p>Patch size for H&amp;E images.</p> <code>None</code> <code>n_neighbors</code> <code>int</code> <p>Number of neighbors for spatial data reading.</p> <code>4</code> <code>augment</code> <code>bool</code> <p>Whether to use the data augmentation.</p> <code>True</code> <code>return_type</code> <code>Literal['anndata', 'graph']</code> <p>Type of data to return.</p> <code>'graph'</code> <p>Returns:</p> Type Description <code>Union[Tuple, Dict]</code> <p>Depending on the 'return_type', returns either a tuple of AnnData objects or a dictionary of graph-related data.</p> Source code in <code>src\\stands\\_read.py</code> <pre><code>@clear_warnings\ndef read_cross(ref: ad.AnnData, tgt: ad.AnnData, spa_key: str = 'spatial',\npreprocess: bool = True, n_genes: int = 3000, patch_size: Optional[int] = None,\nn_neighbors: int = 4, augment: bool = True, \nreturn_type: Literal['anndata', 'graph'] = 'graph'):\n\"\"\"\n    Read spatial data from two sources and preprocess if required.\n    The read data are transformed to reference and target graph.\n    Parameters:\n        ref (ad.AnnData): Reference AnnData object.\n        tgt (ad.AnnData): Target AnnData object.\n        spa_key (str): Key for spatial information in AnnData objects.\n        preprocess (bool): Perform data preprocessing.\n        n_genes (int): Number of genes for feature selection.\n        patch_size (Optional[int]): Patch size for H&amp;E images.\n        n_neighbors (int): Number of neighbors for spatial data reading.\n        augment (bool): Whether to use the data augmentation.\n        return_type (Literal['anndata', 'graph']): Type of data to return.\n    Returns:\n        (Union[Tuple, Dict]): Depending on the 'return_type', returns either a tuple of AnnData objects or a dictionary of graph-related data.\n    \"\"\"\nseed_everything(0)\nref, ref_img, ref_pos = read(ref, False, 'tuple', spa_key=spa_key, n_neighbors=n_neighbors)\ntgt, tgt_img, tgt_pos = read(tgt, False, 'tuple', spa_key=spa_key, n_neighbors=n_neighbors)\noverlap_gene = list(set(ref.var_names) &amp; set(tgt.var_names))\nref = ref[:, overlap_gene]\ntgt = tgt[:, overlap_gene]\nif preprocess:\nref = preprocess_data(ref)\ntgt = preprocess_data(tgt)\nif len(overlap_gene) &lt;= n_genes:\nwarnings.warn(\n'There are too few overlapping genes to perform feature selection'\n)\nelse:\nsc.pp.filter_genes(ref, min_cells=10)\nsc.pp.highly_variable_genes(ref, n_top_genes=n_genes, subset=True)\ntgt = tgt[:, ref.var_names]\nif return_type == 'anndata':\nreturn ref, tgt\nelif return_type == 'graph':\nif patch_size is None:\npatch_size = set_patch(ref)\nref_b = BuildGraph(ref, ref_img, ref_pos, augment, n_neighbors, patch_size)\ntgt_b = BuildGraph(tgt, tgt_img, tgt_pos, augment, n_neighbors, patch_size)\nreturn ref_b.pack(), tgt_b.pack()\n</code></pre>"},{"location":"reference/stands/#stands.read_multi","title":"read_multi","text":"<pre><code>read_multi(\nadata_list: List[ad.AnnData],\npatch_size: Optional[int] = None,\ngene_list: Optional[List[str]] = None,\npreprocess: bool = True,\nn_genes: int = 3000,\nn_neighbors: int = 4,\naugment: bool = True,\nspa_key: str = \"spatial\",\nreturn_type: Literal[\"anndata\", \"graph\"] = \"graph\",\n)\n</code></pre> <p>Read multiple spatial datasets and preprocess if required. All the datasets are transformed to only one graph.</p> <p>Parameters:</p> Name Type Description Default <code>adata_list</code> <code>List[AnnData]</code> <p>List of AnnData objects.</p> required <code>patch_size</code> <code>Optional[int]</code> <p>Patch size for H&amp;E images.</p> <code>None</code> <code>gene_list</code> <code>Optional[List[str]]</code> <p>Selected gene list.</p> <code>None</code> <code>preprocess</code> <code>bool</code> <p>Perform data preprocessing.</p> <code>True</code> <code>n_genes</code> <code>int</code> <p>Number of genes for feature selection.</p> <code>3000</code> <code>n_neighbors</code> <code>int</code> <p>Number of neighbors for spatial data reading.</p> <code>4</code> <code>augment</code> <code>bool</code> <p>Whether to use the data augmentation.</p> <code>True</code> <code>spa_key</code> <code>str</code> <p>Key for spatial information in AnnData objects.</p> <code>'spatial'</code> <code>return_type</code> <code>Literal['anndata', 'graph']</code> <p>Type of data to return.</p> <code>'graph'</code> <p>Returns:</p> Type Description <code>Union[List, Dict]</code> <p>Depending on the 'return_type', returns either a list of AnnData objects or a dictionary of graph-related data.</p> Source code in <code>src\\stands\\_read.py</code> <pre><code>@clear_warnings\ndef read_multi(adata_list: List[ad.AnnData], patch_size: Optional[int] = None,\ngene_list: Optional[List[str]] = None, preprocess: bool = True, \nn_genes: int = 3000, n_neighbors: int = 4, augment: bool = True,\nspa_key: str = 'spatial', return_type: Literal['anndata', 'graph'] = 'graph'):\n\"\"\"\n    Read multiple spatial datasets and preprocess if required.\n    All the datasets are transformed to only one graph.\n    Parameters:\n        adata_list (List[ad.AnnData]): List of AnnData objects.\n        patch_size (Optional[int]): Patch size for H&amp;E images.\n        gene_list (Optional[List[str]]): Selected gene list.\n        preprocess (bool): Perform data preprocessing.\n        n_genes (int): Number of genes for feature selection.\n        n_neighbors (int): Number of neighbors for spatial data reading.\n        augment (bool): Whether to use the data augmentation.\n        spa_key (str): Key for spatial information in AnnData objects.\n        return_type (Literal['anndata', 'graph']): Type of data to return.\n    Returns:\n        (Union[List, Dict]): Depending on the 'return_type', returns either a list of AnnData objects or a dictionary of graph-related data.\n    \"\"\"\nseed_everything(0)\nadatas, images, positions = [], [], []\nfor i in range(len(adata_list)):\nd, img, pos = read(adata_list[i], False, 'tuple', spa_key=spa_key, n_neighbors=n_neighbors)\nadatas.append(d)\nimages.append(img)\npositions.append(pos)\nfor img in images:\nif img is None:\nimages = None\nbreak\nif preprocess:\nadatas = [preprocess_data(d) for d in adatas]\nif gene_list is None:\nref = adatas[0]\nsc.pp.filter_genes(ref, min_cells=10)\nsc.pp.highly_variable_genes(ref, n_top_genes=n_genes, subset=True)\nadatas = [d[:, list(ref.var_names)] for d in adatas]\nelse:\nadatas = [d[:, list(gene_list)] for d in adatas]\nif return_type == 'anndata':\nreturn adatas\nelif return_type == 'graph':\nif patch_size is None:\npatch_size = set_patch(adatas[0])\nbuilder = BuildMultiGraph(adatas, images, positions, augment, n_neighbors, patch_size)\nreturn builder.pack()\n</code></pre>"},{"location":"reference/stands/align/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> align","text":""},{"location":"reference/stands/align/#stands.align","title":"align","text":""},{"location":"reference/stands/align/#stands.align.BatchAlign","title":"BatchAlign","text":"<pre><code>BatchAlign(\nn_epochs: int = 10,\nbatch_size: int = 128,\nlearning_rate: float = 0.0003,\nn_dis: int = 3,\nGPU: Union[bool, str] = True,\nrandom_state: Optional[int] = None,\nweight: Optional[Dict[str, float]] = None,\n)\n</code></pre> Source code in <code>src\\stands\\align.py</code> <pre><code>def __init__(self, \nn_epochs: int = 10, \nbatch_size: int = 128,\nlearning_rate: float = 3e-4, \nn_dis: int = 3,\nGPU: Union[bool, str] = True, \nrandom_state: Optional[int] = None,\nweight: Optional[Dict[str, float]] = None):\nself.n_epochs = n_epochs\nself.batch_size = batch_size\nself.lr = learning_rate\nself.n_dis = n_dis\nself.device = select_device(GPU)\nself.GPU = GPU\nself.seed = random_state\nif random_state is not None:\nseed_everything(random_state)\nif weight is None:\nweight = {'w_rec': 30, 'w_adv': 1, 'w_gp': 10}\nself.weight = weight\n</code></pre>"},{"location":"reference/stands/align/#stands.align.BatchAlign.UpdateD","title":"UpdateD","text":"<pre><code>UpdateD(blocks)\n</code></pre> <p>Updating discriminator</p> Source code in <code>src\\stands\\align.py</code> <pre><code>def UpdateD(self, blocks):\n'''Updating discriminator'''\nself.opt_D.zero_grad()\n# generate fake data\nbatchid = blocks[-1].dstdata['batch']\nfake_g = self.G.STforward(blocks, blocks[0].srcdata['gene'], batchid)\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\nd1 = torch.mean(self.D.SCforward(real_g))\nd2 = torch.mean(self.D.SCforward(fake_g.detach()))\ngp = calculate_gradient_penalty(self.D, real_g, fake_g.detach())         \n# store discriminator loss for printing training information\nself.D_loss = - d1 + d2 + gp * self.weight['w_gp']\nself.D_loss.backward()\nself.opt_D.step()\n</code></pre>"},{"location":"reference/stands/align/#stands.align.BatchAlign.UpdateG","title":"UpdateG","text":"<pre><code>UpdateG(blocks)\n</code></pre> <p>Updating generator</p> Source code in <code>src\\stands\\align.py</code> <pre><code>def UpdateG(self, blocks):\n'''Updating generator'''\nself.opt_G.zero_grad()\n# generate fake data\nbatchid = blocks[-1].dstdata['batch']\nfake_g = self.G.STforward(blocks, blocks[0].srcdata['gene'], batchid)\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\n# discriminator provides feedback\nd = self.D.SCforward(fake_g)\nLoss_rec = self.L1(real_g, fake_g)\nLoss_adv = - torch.mean(d)\n# store generator loss for printing training information and backward\nself.G_loss = self.weight['w_rec']*Loss_rec + self.weight['w_adv']*Loss_adv\nself.G_loss.backward()\nself.opt_G.step()\n</code></pre>"},{"location":"reference/stands/align/#stands.align.BatchAlign.fit","title":"fit","text":"<pre><code>fit(\nraw: Dict[str, Any],\ngenerator: GeneratorAD,\n**alignerkwargs\n)\n</code></pre> <p>Remove batch effects</p> Source code in <code>src\\stands\\align.py</code> <pre><code>def fit(self, raw: Dict[str, Any], generator: GeneratorAD, **alignerkwargs):\n'''Remove batch effects'''\nadatas = raw['adata']\nadata_ref = adatas[0]\nadata_tgt = ad.concat(adatas[1:])\n# find Kin Pairs\nAligner = FindPairs(GPU=self.GPU, random_state=self.seed, **alignerkwargs)\n_, tgt_g = Aligner.fit(generator, raw)\nself.sampler = dgl.dataloading.MultiLayerFullNeighborSampler(2)\nself.dataset = dgl.dataloading.DataLoader(\ntgt_g, tgt_g.nodes(), self.sampler, batch_size=self.batch_size, \nshuffle=True, drop_last=False, num_workers=0, device=self.device\n)\nself.init_model(raw, generator)\ntqdm.write('Begin to correct spatial transcriptomics datasets...')\nself.G.train()\nself.D.train()\nwith tqdm(total=self.n_epochs) as t:\nfor _ in range(self.n_epochs):\nt.set_description(f'Train Epochs')\nfor _, _, blocks in self.dataset:\n# Update discriminator for n_dis times\nfor _ in range(self.n_dis):\nself.UpdateD(blocks)\n# Update generator for one time\nself.UpdateG(blocks)\n# Update learning rate for G and D\nself.D_sch.step()\nself.G_sch.step()\nt.set_postfix(G_Loss = self.G_loss.item(),\nD_Loss = self.D_loss.item())\nt.update(1)\nself.dataset = dgl.dataloading.DataLoader(\ntgt_g, tgt_g.nodes(), self.sampler, batch_size=self.batch_size, \nshuffle=False, drop_last=False, num_workers=0, device=self.device\n)\nself.G.eval()\ncorrected = []\nwith torch.no_grad():\nfor _, _, blocks in self.dataset:\nfake_g = self.G.STforward(\nblocks, blocks[0].srcdata['gene'], blocks[-1].dstdata['batch']\n)\ncorrected.append(fake_g.cpu().detach())\ncorrected = torch.cat(corrected, dim=0).numpy()\nadata_tgt.X = corrected\nadata = ad.concat([adata_ref, adata_tgt])\ntqdm.write('Datasets have been corrected.\\n')\nreturn adata\n</code></pre>"},{"location":"reference/stands/align/#stands.align.FindPairs","title":"FindPairs","text":"<pre><code>FindPairs(\nn_epochs: int = 1000,\nlearning_rate: float = 0.0002,\nGPU: Union[bool, str] = True,\nrandom_state: Optional[int] = None,\nweight: Optional[Dict[str, float]] = None,\n)\n</code></pre> Source code in <code>src\\stands\\align.py</code> <pre><code>def __init__(self, \nn_epochs: int = 1000, \nlearning_rate: float = 2e-4,\nGPU: Union[bool, str] = True, \nrandom_state: Optional[int] = None,\nweight: Optional[Dict[str, float]] = None):\nself.n_epochs = n_epochs\nself.lr = learning_rate\nself.device = select_device(GPU)\nif random_state is not None:\nseed_everything(random_state)\nif weight is None:\nweight = {'w_rec': 30, 'w_adv': 1, 'w_gp': 10}\nself.weight = weight\n</code></pre>"},{"location":"reference/stands/align/#stands.align.FindPairs.UpdateD","title":"UpdateD","text":"<pre><code>UpdateD(z_ref, z_tgt)\n</code></pre> <p>Updating discriminator</p> Source code in <code>src\\stands\\align.py</code> <pre><code>def UpdateD(self, z_ref, z_tgt):\n'''Updating discriminator'''\nself.opt_D.zero_grad()\nz_ref, z_tgt, _ = self.M(z_ref, z_tgt)\nd1 = torch.mean(self.D.Zforward(z_ref.detach()))\nd2 = torch.mean(self.D.Zforward(z_tgt.detach()))\ngp = calculate_gradient_penalty(self.D, z_ref.detach(), z_tgt.detach(), Zforward=True)\n# store discriminator loss for printing training information\nself.D_loss = - d1 + d2 + gp * self.weight['w_gp']\nself.D_loss.backward()\nself.opt_D.step()\n</code></pre>"},{"location":"reference/stands/align/#stands.align.FindPairs.UpdateM","title":"UpdateM","text":"<pre><code>UpdateM(z_ref, z_tgt)\n</code></pre> <p>Updating mapping matrix</p> Source code in <code>src\\stands\\align.py</code> <pre><code>def UpdateM(self, z_ref, z_tgt):\n'''Updating mapping matrix'''\nself.opt_M.zero_grad()\n# reconstruct z_tgt with z_ref\nfake_z_tgt, z_tgt, _ = self.M(z_ref, z_tgt)\nd = self.D.Zforward(fake_z_tgt)\nLoss_rec = self.Loss(z_tgt, fake_z_tgt)\nLoss_adv = -torch.mean(d)\n# store generator loss for printing training information and backward\nself.M_loss = self.weight['w_rec']*Loss_rec + self.weight['w_adv']*Loss_adv\nself.M_loss.backward()\nself.opt_M.step()\n</code></pre>"},{"location":"reference/stands/align/#stands.align.FindPairs.fit","title":"fit","text":"<pre><code>fit(generator: GeneratorAD, raw: Dict[str, Any])\n</code></pre> <p>Find Kin Pairs</p> Source code in <code>src\\stands\\align.py</code> <pre><code>def fit(self, generator: GeneratorAD,  raw: Dict[str, Any]):\n'''Find Kin Pairs'''\ntqdm.write('Begin to find Kin Pairs between datasets...')\nraw_g = raw['graph']\nref_g, tgt_g = self.split(raw_g)\nself.G = generator.to(self.device)\n# freeze self.G weight\nfor param in self.G.parameters():\nparam.requires_grad = False\nself.init_model(raw, ref_g.num_nodes(), tgt_g.num_nodes())\nself.M.train()\nself.D.train()\nwith tqdm(total=self.n_epochs) as t:\nfor _ in range(self.n_epochs):\nt.set_description(f'Train Epochs')\n# generate embeddings\nz_ref = self.G.extract.GeneEncoder(ref_g, ref_g.ndata['gene'])\nz_tgt = self.G.extract.GeneEncoder(tgt_g, tgt_g.ndata['gene'])\nself.UpdateD(z_ref, z_tgt)\nself.UpdateM(z_ref, z_tgt)\n# update learning rate for G and D\nself.D_sch.step()\nself.M_sch.step()\nt.set_postfix(G_Loss = self.M_loss.item(),\nD_Loss = self.D_loss.item())\nt.update(1)\nself.M.eval()\nwith torch.no_grad():\nz_ref = self.G.extract.GeneEncoder(ref_g, ref_g.ndata['gene'])\nz_tgt = self.G.extract.GeneEncoder(tgt_g, tgt_g.ndata['gene'])\n_, _, m = self.M(z_ref, z_tgt)\npair_id = list(ref_g.nodes().cpu().numpy()[m.argmax(axis=1)])\nref_g = dgl.node_subgraph(ref_g, pair_id)\ntgt_g.ndata['ref_gene'] = ref_g.ndata['gene']\ntqdm.write('Kin Pairs have been found.\\n')\nreturn ref_g, tgt_g\n</code></pre>"},{"location":"reference/stands/align/#stands.align.FindPairs.split","title":"split","text":"<pre><code>split(graph: dgl.DGLGraph)\n</code></pre> <p>Split the integrated graph to reference and target graph</p> Source code in <code>src\\stands\\align.py</code> <pre><code>def split(self, graph: dgl.DGLGraph):\n'''Split the integrated graph to reference and target graph'''\nidx = torch.argmax(graph.ndata['batch'], -1).numpy()\nref_id = list(np.where(idx == 0)[0])\ntgt_id = list(np.where(idx != 0)[0])\nref_g = dgl.node_subgraph(graph, ref_id).to(self.device)\ntgt_g = dgl.node_subgraph(graph, tgt_id).to(self.device)\nreturn ref_g, tgt_g\n</code></pre>"},{"location":"reference/stands/anomaly/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> anomaly","text":""},{"location":"reference/stands/anomaly/#stands.anomaly","title":"anomaly","text":""},{"location":"reference/stands/anomaly/#stands.anomaly.AnomalyDetect","title":"AnomalyDetect","text":"<pre><code>AnomalyDetect(\nn_epochs: int = 10,\nbatch_size: int = 128,\nlearning_rate: float = 0.0003,\nn_dis: int = 2,\nGPU: Union[bool, str] = True,\nrandom_state: Optional[int] = None,\nweight: Optional[Dict[str, float]] = None,\n)\n</code></pre> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>def __init__(self, \nn_epochs: int = 10, \nbatch_size: int = 128,\nlearning_rate: float = 3e-4,\nn_dis: int = 2,\nGPU: Union[bool, str] = True,\nrandom_state: Optional[int] = None,\nweight: Optional[Dict[str, float]] = None):\nself.n_epochs = n_epochs\nself.batch_size = batch_size\nself.lr = learning_rate\nself.n_dis = n_dis\nself.device = select_device(GPU)\nif random_state is not None:\nseed_everything(random_state)\nif weight is None:\nweight = {'w_rec': 30, 'w_adv': 1, 'w_gp': 10}\nself.weight = weight\n</code></pre>"},{"location":"reference/stands/anomaly/#stands.anomaly.AnomalyDetect.UpdateD","title":"UpdateD","text":"<pre><code>UpdateD(blocks)\n</code></pre> <p>Updating discriminator</p> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>def UpdateD(self, blocks):\n'''Updating discriminator'''\nself.opt_D.zero_grad()\nif self.only_ST:\n# generate fake data\n_, fake_g = self.G.STforward(blocks, blocks[0].srcdata['gene'])\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\nd1 = torch.mean(self.D.SCforward(real_g))\nd2 = torch.mean(self.D.SCforward(fake_g.detach()))\ngp = calculate_gradient_penalty(self.D, real_g, fake_g.detach())\nelse:\n_, fake_g, fake_p = self.G.Fullforward(\nblocks, blocks[0].srcdata['gene'], blocks[1].srcdata['patch']\n)\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\nreal_p = blocks[1].dstdata['patch']\nd1 = torch.mean(self.D.Fullforward(real_g, real_p))\nd2 = torch.mean(self.D.Fullforward(fake_g.detach(), fake_p.detach()))\ngp = calculate_gradient_penalty(\nself.D, real_g, fake_g.detach(), real_p, fake_p.detach()\n)            \n# store discriminator loss for printing training information\nself.D_loss = - d1 + d2 + gp * self.weight['w_gp']\nself.D_loss.backward()\nself.opt_D.step()\n</code></pre>"},{"location":"reference/stands/anomaly/#stands.anomaly.AnomalyDetect.UpdateG","title":"UpdateG","text":"<pre><code>UpdateG(blocks)\n</code></pre> <p>Updating generator</p> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>def UpdateG(self, blocks):\n'''Updating generator'''\nself.opt_G.zero_grad()\nif self.only_ST:\n# generate fake data\nz, fake_g = self.G.STforward(blocks, blocks[0].srcdata['gene'])\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\n# discriminator provides feedback\nd = self.D.SCforward(fake_g)\nLoss_rec = self.L1(real_g, fake_g)\nLoss_adv = - torch.mean(d)\nelse:\nz, fake_g, fake_p = self.G.Fullforward(\nblocks, blocks[0].srcdata['gene'], blocks[1].srcdata['patch']\n)\n# get real data from blocks\nreal_g = blocks[1].dstdata['gene']\nreal_p = blocks[1].dstdata['patch']\n# discriminator provides feedback\nd = self.D.Fullforward(fake_g, fake_p)\nLoss_rec = (self.L1(real_g, fake_g)+self.L1(real_p, fake_p))/2\nLoss_adv = - torch.mean(d)\n# store generator loss for printing training information and backward\nself.G_loss = self.weight['w_rec'] * Loss_rec + self.weight['w_adv'] * Loss_adv\nself.G_loss.backward()\nself.opt_G.step()\n# updating memory block with generated embeddings, fake_z\nself.G.Memory.update_mem(z)\n</code></pre>"},{"location":"reference/stands/anomaly/#stands.anomaly.AnomalyDetect.fit","title":"fit","text":"<pre><code>fit(\nref: Dict[str, Any],\nonly_ST: bool = False,\nweight_dir: Optional[str] = None,\n)\n</code></pre> <p>Train STANDS on reference graph</p> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>def fit(self, ref: Dict[str, Any], only_ST: bool = False, weight_dir: Optional[str] = None):\n'''Train STANDS on reference graph'''\ntqdm.write('Begin to train the model on reference datasets...')\n# dataset provides subgraph for training\nref_g = ref['graph']\nself.sampler = dgl.dataloading.MultiLayerFullNeighborSampler(2)\nself.dataset = dgl.dataloading.DataLoader(\nref_g, ref_g.nodes(), self.sampler, batch_size=self.batch_size, \nshuffle=True, drop_last=True, num_workers=0, device=self.device\n)\nself.only_ST = only_ST\nself.init_model(ref, weight_dir)\nself.G.train()\nself.D.train()\nwith tqdm(total=self.n_epochs) as t:\nfor _ in range(self.n_epochs):\nt.set_description(f'Train Epochs')\nfor _, _, blocks in self.dataset:\n# Update discriminator for n_dis times\nfor _ in range(self.n_dis):\nself.UpdateD(blocks)\n# Update generator for one time\nself.UpdateG(blocks)\n# Update learning rate for G and D\nself.D_sch.step()\nself.G_sch.step()\nt.set_postfix(G_Loss = self.G_loss.item(),\nD_Loss = self.D_loss.item())\nt.update(1)\ntqdm.write('Training has been finished.')\n</code></pre>"},{"location":"reference/stands/anomaly/#stands.anomaly.AnomalyDetect.init_weight","title":"init_weight","text":"<pre><code>init_weight(weight_dir)\n</code></pre> <p>Initial stage for pretrained weights and memory block</p> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>@torch.no_grad()\ndef init_weight(self, weight_dir):\n'''Initial stage for pretrained weights and memory block'''\nself.G.extract.load_weight(weight_dir)\n# Initial the memory block with the normal embeddings\nsum_t = self.G.Memory.mem_dim/self.batch_size\nt = 0\nwhile t &lt; sum_t:\nfor _, _, blocks in self.dataset:\nif self.only_ST:\nreal_g = blocks[0].srcdata['gene']\nz, _ = self.G.STforward(blocks, real_g)\nelse:\nreal_g = blocks[0].srcdata['gene']\nreal_p = blocks[1].srcdata['patch']\nz, _, _ = self.G.Fullforward(blocks, real_g, real_p)\nself.G.Memory.update_mem(z)\nt += 1\n</code></pre>"},{"location":"reference/stands/anomaly/#stands.anomaly.AnomalyDetect.predict","title":"predict","text":"<pre><code>predict(tgt: Dict[str, Any], run_gmm: bool = True)\n</code></pre> <p>Detect anomalous spots on target graph</p> Source code in <code>src\\stands\\anomaly.py</code> <pre><code>@torch.no_grad()\ndef predict(self, tgt: Dict[str, Any], run_gmm: bool = True):\n'''Detect anomalous spots on target graph'''\ntgt_g = tgt['graph']\ndataset = dgl.dataloading.DataLoader(\ntgt_g, tgt_g.nodes(), self.sampler, batch_size=self.batch_size, \nshuffle=False, drop_last=False, num_workers=0, device=self.device\n)\nself.G.eval()\nself.D.eval()\ntqdm.write('Detect anomalous spots on target dataset...')\nref_score = self.score(self.dataset)\ntgt_score = self.score(dataset)\ntqdm.write('Anomalous spots have been detected.\\n')\nif run_gmm:\ngmm = GMMWithPrior(ref_score)\nthreshold = gmm.fit(tgt_score=tgt_score)\ntgt_label = [1 if s &gt;= threshold else 0 for s in tgt_score]\nreturn tgt_score, tgt_label\nelse:\nreturn tgt_score\n</code></pre>"},{"location":"reference/stands/configs/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> configs","text":""},{"location":"reference/stands/configs/#stands.configs","title":"configs","text":""},{"location":"reference/stands/pretrain/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> pretrain","text":""},{"location":"reference/stands/pretrain/#stands.pretrain","title":"pretrain","text":""},{"location":"reference/stands/pretrain/#stands.pretrain.pretrain","title":"pretrain","text":"<pre><code>pretrain(\nadata_list: List[ad.AnnData],\nn_epochs: int = 100,\npatch_size: Optional[int] = None,\nbatch_size: int = 128,\nlearning_rate: float = 0.0001,\nGPU: Union[bool, str] = True,\nrandom_state: int = None,\nweight_dir: Optional[str] = None,\n)\n</code></pre> <p>Pretrain STANDS basic extractors using spatial data. After the completion of pre-training, the weights will be automatically saved.</p> <p>Parameters:</p> Name Type Description Default <code>adata_list</code> <code>List[AnnData]</code> <p>input spatial data (to be trained).</p> required <code>n_epochs</code> <code>int</code> <p>Number of training epochs.</p> <code>100</code> <code>patch_size</code> <code>Optional[int]</code> <p>Patch size for H&amp;E images.</p> <code>None</code> <code>batch_size</code> <code>int</code> <p>Batch size for training.</p> <code>128</code> <code>learning_rate</code> <code>float</code> <p>Learning rate for the optimizer.</p> <code>0.0001</code> <code>GPU</code> <code>Union[bool, str]</code> <p>Whether to use GPU for training, and GPU ID (i.e., cuda:0)</p> <code>True</code> <code>random_state</code> <code>int</code> <p>Random seed for reproducibility.</p> <code>None</code> <code>weight_dir</code> <code>Optional[str]</code> <p>Directory path to save the pretrained model weights.</p> <code>None</code> Source code in <code>src\\stands\\pretrain.py</code> <pre><code>def pretrain(adata_list: List[ad.AnnData],\nn_epochs: int = 100,\npatch_size: Optional[int] = None,\nbatch_size: int = 128,\nlearning_rate: float = 1e-4,\nGPU: Union[bool, str] = True,\nrandom_state: int = None,\nweight_dir: Optional[str] = None\n):\n\"\"\"\n    Pretrain STANDS basic extractors using spatial data.\n    After the completion of pre-training, the weights will be automatically saved.\n    Parameters:\n        adata_list (List[ad.AnnData]): input spatial data (to be trained).\n        n_epochs (int): Number of training epochs.\n        patch_size (Optional[int]): Patch size for H&amp;E images.\n        batch_size (int): Batch size for training.\n        learning_rate (float): Learning rate for the optimizer.\n        GPU (Union[bool, str]): Whether to use GPU for training, and GPU ID (i.e., cuda:0)\n        random_state (int): Random seed for reproducibility.\n        weight_dir (Optional[str]): Directory path to save the pretrained model weights.\n    \"\"\"\nif GPU:\nif torch.cuda.is_available():\nif isinstance(GPU, str):\ndevice = torch.device(GPU)\nelse:\ndevice = torch.device('cuda:0')\nelse:\nprint(\"GPU isn't available, and use CPU to train Docs.\")\ndevice = torch.device(\"cpu\")\nelse:\ndevice = torch.device(\"cpu\")\nif random_state is not None:\nseed_everything(random_state)\n# Initialize dataloader for train data\ntrain = read_multi(adata_list, patch_size, preprocess=False)\ngraph = train['graph']\nsampler = dgl.dataloading.MultiLayerFullNeighborSampler(2)\ndataset = dgl.dataloading.DataLoader(\ngraph, graph.nodes(), sampler,\nbatch_size=batch_size, shuffle=True,\ndrop_last=False, num_workers=0, device=device)\nconfigs = FullConfigs(train['gene_dim'], train['patch_size'])\nnet = Extractor(configs).to(device)\nopt_G = optim.Adam(net.parameters(), lr=learning_rate, betas=(0.5, 0.999))\nG_scheduler = optim.lr_scheduler.CosineAnnealingLR(optimizer=opt_G, T_max=n_epochs)\nL1 = nn.L1Loss().to(device)\ntqdm.write('Begin to pretrain STANDS...')\nwith tqdm(total=n_epochs) as t:\nfor _ in range(n_epochs):\nt.set_description(f'Pretrain STANDS')\nfor _, _, blocks in dataset:\nopt_G.zero_grad()\nreal_g = blocks[0].srcdata['gene']\nreal_p = blocks[1].srcdata['patch']\nfake_g, fake_p = net.pretrain(blocks, real_g, real_p)\nLoss = (L1(blocks[1].dstdata['gene'], fake_g) + \\\n                        L1(blocks[1].dstdata['patch'], fake_p))\nLoss.backward()\nopt_G.step()\nG_scheduler.step()\nt.set_postfix(Loss = Loss.item())\nt.update(1)\nif weight_dir is None:\nweight_dir = os.path.dirname(__file__) + '/model/backbone/model.pth'\ntorch.save(net.state_dict(), weight_dir)\ntqdm.write(f'The pretrained weights for STANDS have been automatically saved at {weight_dir}!')\n</code></pre>"},{"location":"reference/stands/subtype/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> subtype","text":""},{"location":"reference/stands/subtype/#stands.subtype","title":"subtype","text":""},{"location":"reference/stands/subtype/#stands.subtype.Subtype","title":"Subtype","text":"<pre><code>Subtype(\ngenerator: GeneratorAD,\nn_subtypes: int = 2,\nGPU: Union[bool, str] = True,\nrandom_state: Optional[int] = None,\n)\n</code></pre> Source code in <code>src\\stands\\subtype.py</code> <pre><code>def __init__(self, \ngenerator: GeneratorAD, \nn_subtypes: int = 2,\nGPU: Union[bool, str] = True, \nrandom_state: Optional[int] = None,\n):\nself.n_subtype = n_subtypes\nself.device = select_device(GPU)\nself.G = generator.to(self.device)\nself.C = Cluster(self.G, self.n_subtype).to(self.device)\nif random_state is not None:\nseed_everything(random_state)\nself.seed = random_state\ngenerator = None  # remove model\n</code></pre>"},{"location":"reference/stands/subtype/#stands.subtype.Subtype.fit","title":"fit","text":"<pre><code>fit(data: Dict[str, Any])\n</code></pre> <p>Detect subtypes of samples</p> Source code in <code>src\\stands\\subtype.py</code> <pre><code>def fit(self, data: Dict[str, Any]):\n'''Detect subtypes of samples'''\ngraph = data['graph'].to(self.device)\nself.G.eval()\nself.C.train()\nz, res_z = self.generate_z_res(graph)\nq = self.C.fit(z, res_z)\nreturn q\n</code></pre>"},{"location":"reference/stands/subtype/#stands.subtype.Subtype.generate_z_res","title":"generate_z_res","text":"<pre><code>generate_z_res(graph: dgl.DGLGraph)\n</code></pre> <p>Generate reconstructed data</p> Source code in <code>src\\stands\\subtype.py</code> <pre><code>@torch.no_grad()\ndef generate_z_res(self, graph: dgl.DGLGraph):\n'''Generate reconstructed data'''\nself.G.eval()\nif self.G.extract.only_ST:\nz, fake_g = self.G.STforward(graph, graph.ndata['gene'])\nres_g = graph.ndata['gene'] - fake_g.detach()\nres_z = self.C.STforward(graph, res_g)\nelse:\nz, fake_g, fake_p = self.G.Fullforward(\ngraph, graph.ndata['gene'], graph.ndata['patch']\n)\nres_g = graph.ndata['gene'] - fake_g.detach()\nres_p = graph.ndata['patch'] - fake_p.detach()\nres_z = self.C.Fullforward(graph, res_g, res_p)\nreturn z, res_z\n</code></pre>"},{"location":"reference/stands/evaluate/","title":"Index","text":""},{"location":"reference/stands/evaluate/#stands.evaluate","title":"evaluate","text":"<p>STANDS provides an evaluate function for various metrics.</p> <p>Modules:</p> Name Description <code>evaluate</code> <p>Calculate various metrics (including SGD).</p>"},{"location":"reference/stands/evaluate/#stands.evaluate.evaluate","title":"evaluate","text":"<pre><code>evaluate(\nmetrics: Sequence[metrics_list],\ny_true=None,\ny_score=None,\ny_pred=None,\nadata: Optional[ad.AnnData] = None,\nbatchid: Optional[str] = None,\ntypeid: Optional[str] = None,\nemb: Optional[str] = None,\nclustid: Optional[str] = None,\nspaid: Optional[str] = None,\n**kwargs\n)\n</code></pre> <p>Evaluate performance metrics based on specified evaluation metrics. Different metrics require different parameters. Here is a description of the metrics that can be calculated and the parameters they require.</p> <p>Functions:</p> Name Description <code>AUC</code> <p><code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>Precision</code> <p><code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>Recall</code> <p><code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>F1</code> <p><code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>F1*NMI</code> <p><code>y_true</code>, <code>y_pred</code>/<code>y_score</code>, <code>adata</code>, <code>typeid</code>, <code>clustid</code></p> <code>SGD_degree</code> <p><code>adata</code>, <code>spaid</code>, <code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>SGD_cc</code> <p><code>adata</code>, <code>spaid</code>, <code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>ARI</code> <p><code>adata</code>, <code>typeid</code>, <code>clustid</code></p> <code>NMI</code> <p><code>adata</code>, <code>typeid</code>, <code>clustid</code></p> <code>ASW_type</code> <p><code>adata</code>, <code>typeid</code>, <code>batchid</code>, (Optional: <code>emb</code>)</p> <code>1-ASW_batch</code> <p><code>adata</code>, <code>typeid</code>, <code>batchid</code>, (Optional: <code>emb</code>)</p> <code>BatchKL</code> <p><code>adata</code>, <code>batchid</code>, (Optional: <code>emb</code>)</p> <code>iLISI</code> <p><code>adata</code>, <code>batchid</code>, (Optional: <code>emb</code>)</p> <code>cLISI</code> <p><code>adata</code>, <code>typeid</code>, (Optional: <code>emb</code>)</p> <p>Parameters:</p> Name Type Description Default <code>metrics</code> <code>Sequence[str]</code> <p>List of evaluation metrics to compute.</p> required <code>y_true</code> <code>Optional[Union[Series, ndarray]]</code> <p>True labels.</p> <code>None</code> <code>y_score</code> <code>Optional[Union[Series, ndarray]]</code> <p>Predicted scores or probabilities.</p> <code>None</code> <code>y_pred</code> <code>Optional[Union[Series, ndarray]]</code> <p>Predicted labels.</p> <code>None</code> <code>adata</code> <code>Optional[AnnData]</code> <p>Annotated data containing embeddings or clusters.</p> <code>None</code> <code>batchid</code> <code>Optional[str]</code> <p>Batch ID key in adata.obs for batch information.</p> <code>None</code> <code>typeid</code> <code>Optional[str]</code> <p>Type ID key in adata.obs for type information.</p> <code>None</code> <code>emb</code> <code>Optional[str]</code> <p>Key for embeddings in adata.obsm.</p> <code>None</code> <code>clustid</code> <code>Optional[str]</code> <p>Cluster ID key in adata.obs for clustering information.</p> <code>None</code> <code>spaid</code> <code>Optional[str]</code> <p>Spatial coordinates ID key in adata.obsm (for SGD_degree &amp; SGD_cc metrics).</p> <code>None</code> <p>Other Parameters:</p> Name Type Description <code>n_neighbors</code> <code>int</code> <p>Number of neighbors for SGD KNN graph.</p> <code>bins</code> <code>int</code> <p>Number of equal-width bins in the given range when calculating SGD_cc.</p> <code>num_bootstrap_samples</code> <code>int</code> <p>Number of bootstrap samples for distribution estimation.</p> <code>sigma</code> <code>int</code> <p>Sigma parameter for Gaussian Earth Mover's Distance.</p> <p>Returns:</p> Type Description <code>Union[Tuple[float], float]</code> <p>Depending on the number of specified metrics, returns a tuple of metric values or a single metric value.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>In the anomaly detection, it doesn't specify <code>y_score</code> or <code>y_pred</code>.</p> Note <p>SGD_degree &amp; SGD_cc are available for both anomaly detection and subtyping tasks.  They will automatically determine the category based on the types of anomalies in y_true eliminating the need for additional parameters to specify whether it is the subtyping task.</p> Source code in <code>src\\stands\\evaluate\\eval.py</code> <pre><code>@clear_warnings\ndef evaluate(metrics: Sequence[metrics_list],\ny_true=None, y_score=None, y_pred=None,\nadata: Optional[ad.AnnData]=None,\nbatchid: Optional[str]=None, typeid: Optional[str]=None,\nemb: Optional[str] = None, clustid: Optional[str] = None,\nspaid: Optional[str] = None, **kwargs):\n\"\"\"\n    Evaluate performance metrics based on specified evaluation metrics.\n    Different metrics require different parameters.\n    Here is a description of the metrics that can be calculated and the parameters they require.\n    Functions:\n        AUC: `y_true`, `y_pred`/`y_score`\n        Precision: `y_true`, `y_pred`/`y_score`\n        Recall: `y_true`, `y_pred`/`y_score`\n        F1: `y_true`, `y_pred`/`y_score`\n        F1*NMI: `y_true`, `y_pred`/`y_score`, `adata`, `typeid`, `clustid`\n        SGD_degree: `adata`, `spaid`, `y_true`, `y_pred`/`y_score`\n        SGD_cc: `adata`, `spaid`, `y_true`, `y_pred`/`y_score`\n        ARI: `adata`, `typeid`, `clustid`\n        NMI: `adata`, `typeid`, `clustid`\n        ASW_type: `adata`, `typeid`, `batchid`, (Optional: `emb`)\n        1-ASW_batch: `adata`, `typeid`, `batchid`, (Optional: `emb`)\n        BatchKL: `adata`, `batchid`, (Optional: `emb`)\n        iLISI: `adata`, `batchid`, (Optional: `emb`)\n        cLISI: `adata`, `typeid`, (Optional: `emb`)\n    Parameters:\n        metrics (Sequence[str]): List of evaluation metrics to compute.\n        y_true (Optional[Union[pd.Series, np.ndarray]]): True labels.\n        y_score (Optional[Union[pd.Series, np.ndarray]]): Predicted scores or probabilities.\n        y_pred (Optional[Union[pd.Series, np.ndarray]]): Predicted labels.\n        adata (Optional[ad.AnnData]): Annotated data containing embeddings or clusters.\n        batchid (Optional[str]): Batch ID key in adata.obs for batch information.\n        typeid (Optional[str]): Type ID key in adata.obs for type information.\n        emb (Optional[str]): Key for embeddings in adata.obsm.\n        clustid (Optional[str]): Cluster ID key in adata.obs for clustering information.\n        spaid (Optional[str]): Spatial coordinates ID key in adata.obsm (for SGD_degree &amp; SGD_cc metrics).\n    Other Parameters:\n        n_neighbors (int): Number of neighbors for SGD KNN graph.\n        bins (int): Number of equal-width bins in the given range when calculating SGD_cc.\n        num_bootstrap_samples (int): Number of bootstrap samples for distribution estimation.\n        sigma (int): Sigma parameter for Gaussian Earth Mover's Distance.\n    Returns:\n        (Union[Tuple[float], float]): Depending on the number of specified metrics, returns a tuple of metric values or a single metric value.\n    Raises:\n        RuntimeError: In the anomaly detection, it doesn't specify `y_score` or `y_pred`.\n    Note:\n        SGD_degree &amp; SGD_cc are available for both anomaly detection and subtyping tasks. \n        They will automatically determine the category based on the types of anomalies in y_true\n        eliminating the need for additional parameters to specify whether it is the subtyping task.\n    \"\"\"\ndata = {}\nif  y_true is not None:\ny_true = pd.Series(y_true)\nif y_score is not None:\ny_score = pd.Series(y_score)\nratio = 100.0 * len(np.where(y_true == 0)[0]) / len(y_true)\nthres = np.percentile(y_score, ratio)\ny_pred = (y_score &gt;= thres).astype(int)\ny_true = y_true.astype(int)\nelif y_pred is not None:\ny_pred = pd.Series(y_pred).astype(int)\nelse:\nraise RuntimeError('Please input y_score or y_pred!')\ndata.update({'y_true': y_true, 'y_score': y_score, 'y_pred': y_pred})\n# for SGD_degree and SGD_cc metrics\nif (adata is not None) and (spaid is not None):\ndata.update({'spatial': adata.obsm[spaid]})\nif adata is not None:\nif emb is not None:\ncorrect = adata.obsm[emb]\ndata.update({'correct': correct})\nelif ['ASW_type', '1-ASW_batch', 'BatchKL', 'iLISI', 'cLISI'] in metrics:\nsc.tl.tsne(adata, random_state=0, use_fast_tsne=False)\ncorrect = adata.obsm['X_tsne']\ndata.update({'correct': correct})\nif batchid is not None:\n_, idx = np.unique(adata.obs[batchid].values, return_inverse=True)\ndata.update({'batch': idx})\nif typeid is not None:\n_, idx = np.unique(adata.obs[typeid].values, return_inverse=True)\ndata.update({'type': idx})\nif clustid is not None:\n_, idx = np.unique(adata.obs[clustid].values, return_inverse=True)\ndata.update({'cluster': idx})\nmethod = {\n'AUC': eval_AUC,\n'Precision': eval_P, \n'Recall': eval_R, \n'F1': eval_F1,\n'F1*NMI': evla_F1NMI,\n'ARI': eval_ARI,\n'NMI': eval_NMI,\n'ASW_type': eval_ASW_type,\n'1-ASW_batch': eval_ASW_batch,\n'BatchKL': eval_BatchKL,\n'iLISI': eval_iLISI,\n'cLISI': eval_cLISI,\n'SGD_degree': eval_SGD_degree,\n'SGD_cc': eval_SGD_cc\n}\nresult = []\nfor m in metrics:\nif m in ['SGD_degree','SGD_cc']:\nr = method[m](data, **kwargs)\nelse:\nr = method[m](data)\nresult.append(r)\nif len(result) &gt;= 2:\nreturn tuple(result)\nelse:\nreturn result[0]\n</code></pre>"},{"location":"reference/stands/evaluate/SGD/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> SGD","text":""},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD","title":"SGD","text":""},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD.Build_SGD_graph","title":"Build_SGD_graph","text":"<pre><code>Build_SGD_graph(data: Dict, n_neighbors: str = 6)\n</code></pre> <p>Spatial locations are represented as nodes in an undirected graph.Normal spots are isolated,  while anomalous spots are connected to their k-nearest anomalous neighbors. Note that in the  anomaly detection results, incorrectly identified spots as anomalies (false positives) become  connected, and false negatives become isolated, which leads to a deviation from the local  structures of the ground truth graph. Spots are divided into two regions: one includes true  positives plus false positives (TP+FP) anomalies, and the other includes true positives plus  false negatives (TP+FN) anomalies. We perform a bootstrap sampling of m sets of spots from these  two regions.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; g_pred_list, g_truth_list = Build_SGD_graph(data, n_neighbors = 6).build_graph()\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>Dict</code> <p>Dictionary containing spatial data and labels.</p> required <code>n_neighbors</code> <code>int</code> <p>Number of neighbors to consider for edge creation (default is 6).</p> <code>6</code> Source code in <code>src\\stands\\evaluate\\SGD.py</code> <pre><code>def __init__(self, data: Dict, n_neighbors: str = 6):\n\"\"\"\n    Initialize the Build_SGD_graph class. \n    Parameters:\n        data (Dict): Dictionary containing spatial data and labels.\n        n_neighbors (int): Number of neighbors to consider for edge creation (default is 6).\n    \"\"\"\nself.data = data\nself.position = data['spatial']\nself.n_neighbors = n_neighbors\nself.truth_list = np.delete(np.unique(data['y_true']), 0)\nself.pred_list = np.unique(data['y_pred'])\n</code></pre>"},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD.Build_SGD_graph.build_graph","title":"build_graph","text":"<pre><code>build_graph()\n</code></pre> <p>Build graphs for predicted and ground truth labels.</p> <p>Returns:</p> Type Description <code>List[DGLGraph]</code> <p>List of DGLGraph objects representing the predicted and ground truth graphs.</p> Source code in <code>src\\stands\\evaluate\\SGD.py</code> <pre><code>def build_graph(self):\n\"\"\"\n    Build graphs for predicted and ground truth labels.\n    Returns:\n        (List[dgl.DGLGraph]): List of DGLGraph objects representing the predicted and ground truth graphs.\n    \"\"\"\nu, v = self.get_edge()\ng_pred_list = []\ng_truth_list = []\nfor typeid in self.truth_list:\nif typeid == 0 and len(self.truth_list) == 2:\n#ground truth\ng_truth = dgl.graph((u,v))\ng_truth = dgl.add_self_loop(g_truth)\ng_truth.ndata['anomaly'] =  self.get_anomaly(is_truth=True, typeid=typeid)\ng_truth.ndata['position'] = torch.tensor(self.position, dtype=torch.float32)\nself.remove_edges(g_truth)\ng_truth_list.append(g_truth)\n# predict\ng_pred = dgl.graph((u,v))\ng_pred = dgl.add_self_loop(g_pred)\ng_pred.ndata['anomaly'] = self.get_anomaly(is_truth=False, typeid=typeid)\ng_pred.ndata['position'] = torch.tensor(self.position, dtype=torch.float32)\nclassification_data = self.get_classification(g_pred, g_truth)\ng_pred.ndata['classification'] = classification_data\nself.remove_edges(g_pred)\ng_pred_list.append(g_pred)\nelif typeid == 0 and len(set(self.truth_list)) != 2:\ncontinue \nelse:\n# ground truth\ng_truth = dgl.graph((u,v))\ng_truth = dgl.add_self_loop(g_truth)\ng_truth.ndata['anomaly'] = self.get_anomaly(True, typeid, typeid)\ng_truth.ndata['position'] = torch.tensor(self.position, dtype=torch.float32)\nself.remove_edges(g_truth)\ng_truth_list.append(g_truth)\nfor predid in self.pred_list:\nif predid == 0:\ncontinue\ng_pred = dgl.graph((u,v))\ng_pred = dgl.add_self_loop(g_pred)\ng_pred.ndata['anomaly'] = self.get_anomaly(False, typeid, predid)\ng_pred.ndata['position'] = torch.tensor(self.position, dtype=torch.float32)\nclassification_data = self.get_classification(g_pred,g_truth)\ng_pred.ndata['classification'] = classification_data\nself.remove_edges(g_pred)                        \ng_pred_list.append(g_pred)\ng_truth_list = list(itertools.chain.from_iterable(itertools.repeat(g_truth,len(set(self.pred_list))-1) for g_truth in g_truth_list))\nreturn g_pred_list, g_truth_list\n</code></pre>"},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD.Build_SGD_graph.classify_cells","title":"classify_cells","text":"<pre><code>classify_cells(pred: int, truth: int)\n</code></pre> <p>Classify cells based on prediction and ground truth.</p> <p>Parameters:</p> Name Type Description Default <code>pred</code> <code>int</code> <p>Predicted flag (1 for anomaly, 0 for normal).</p> required <code>truth</code> <code>int</code> <p>Ground truth flag (1 for anomaly, 0 for normal).</p> required <p>Returns:</p> Type Description <code>str</code> <p>Classification result (TP, FP, FN, or TN).</p> Source code in <code>src\\stands\\evaluate\\SGD.py</code> <pre><code>def classify_cells(self, pred: int, truth: int):\n\"\"\"\n    Classify cells based on prediction and ground truth.\n    Parameters:\n        pred (int): Predicted flag (1 for anomaly, 0 for normal).\n        truth (int): Ground truth flag (1 for anomaly, 0 for normal).\n    Returns:\n        (str): Classification result (TP, FP, FN, or TN).\n    \"\"\"\nif pred == 1 and truth == 1:\nreturn 'TP'\nelif pred == 1 and truth == 0:\nreturn 'FP'\nelif pred == 0 and truth == 1:\nreturn 'FN'\nelse:\nreturn 'TN'    \n</code></pre>"},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD.Build_SGD_graph.get_anomaly","title":"get_anomaly","text":"<pre><code>get_anomaly(is_truth=True, typeid=None, binary_typeid=None)\n</code></pre> <p>Extract anomaly information for nodes.</p> <p>Parameters:</p> Name Type Description Default <code>is_truth</code> <code>bool</code> <p>If True, extract anomaly data from ground truth labels. If False, extract from predicted labels.</p> <code>True</code> <code>typeid</code> <code>Optional[int]</code> <p>Type ID for filtering data.</p> <code>None</code> <code>binary_typeid</code> <code>Optional[int]</code> <p>Binary Type ID for filtering data.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tensor</code> <p>Anomaly data as a tensor.</p> Source code in <code>src\\stands\\evaluate\\SGD.py</code> <pre><code>def get_anomaly(self, is_truth=True, typeid=None, binary_typeid=None):\n\"\"\"\n    Extract anomaly information for nodes.\n    Parameters:\n        is_truth (bool): If True, extract anomaly data from ground truth labels. If False, extract from predicted labels.\n        typeid (Optional[int]): Type ID for filtering data.\n        binary_typeid (Optional[int]): Binary Type ID for filtering data.\n    Returns:\n        (torch.Tensor): Anomaly data as a tensor.\n    \"\"\"\nif is_truth:\nif typeid == 0:\nanomaly_data = np.array(self.data['y_true']).astype(int)\nelse:\nanomaly_data = np.array(self.data['y_true'] == binary_typeid).astype(int)\nelse:\nif typeid == 0:\nanomaly_data = np.array(self.data['y_pred']).astype(int)\nelse:\nanomaly_data = np.array(self.data['y_pred'] == binary_typeid).astype(int)\nreturn torch.tensor(anomaly_data, dtype=torch.float32)\n</code></pre>"},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD.Build_SGD_graph.get_classification","title":"get_classification","text":"<pre><code>get_classification(\npred_graph: dgl.DGLGraph, truth_graph: dgl.DGLGraph\n)\n</code></pre> <p>Get classification labels for nodes in predicted and ground truth graphs.</p> <p>Parameters:</p> Name Type Description Default <code>pred_graph</code> <code>DGLGraph</code> <p>Predicted graph.</p> required <code>truth_graph</code> <code>DGLGraph</code> <p>Ground truth graph.</p> required <p>Returns:</p> Type Description <code>Tensor</code> <p>Classification labels as a tensor.</p> Source code in <code>src\\stands\\evaluate\\SGD.py</code> <pre><code>def get_classification(self, pred_graph: dgl.DGLGraph, truth_graph: dgl.DGLGraph):\n\"\"\"\n    Get classification labels for nodes in predicted and ground truth graphs.\n    Parameters:\n        pred_graph (dgl.DGLGraph): Predicted graph.\n        truth_graph (dgl.DGLGraph): Ground truth graph.\n    Returns:\n        (torch.Tensor): Classification labels as a tensor.\n    \"\"\"\nmapping = {'TP': 1, 'FP': 2, 'FN': 3, 'TN': 4}\nclassification_data_list = []\nfor pred_node, truth_node in zip(pred_graph.ndata['anomaly'], truth_graph.ndata['anomaly']):\npred = int(pred_node)\ntruth = int(truth_node)\nclassification = self.classify_cells(pred, truth)\nclassification_data_list.append(mapping[classification])\nreturn torch.tensor(classification_data_list,dtype = torch.long)\n</code></pre>"},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD.Build_SGD_graph.get_edge","title":"get_edge","text":"<pre><code>get_edge()\n</code></pre> <p>Generate edges based on spatial positions.</p> <p>Returns:</p> Type Description <code>Tuple[ndarray]</code> <p>Two arrays representing source and destination nodes for edges.</p> Source code in <code>src\\stands\\evaluate\\SGD.py</code> <pre><code>def get_edge(self):\n\"\"\"\n    Generate edges based on spatial positions.\n    Returns:\n        (Tuple[np.ndarray]): Two arrays representing source and destination nodes for edges.\n    \"\"\"\nnbrs = NearestNeighbors(n_neighbors = self.n_neighbors + 1)\nnbrs.fit(self.position)   \n_, indices = nbrs.kneighbors(self.position)\nu = indices[:,0].repeat(self.n_neighbors)\nv = indices[:,1:].flatten()\nreturn u, v\n</code></pre>"},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD.Build_SGD_graph.remove_edges","title":"remove_edges","text":"<pre><code>remove_edges(g: dgl.DGLGraph)\n</code></pre> <p>Remove edges from the graph based on anomaly information.</p> <p>Parameters:</p> Name Type Description Default <code>g</code> <code>DGLGraph</code> <p>Input graph.</p> required Source code in <code>src\\stands\\evaluate\\SGD.py</code> <pre><code>def remove_edges(self, g: dgl.DGLGraph):\n\"\"\"\n    Remove edges from the graph based on anomaly information.\n    Parameters:\n        g (dgl.DGLGraph): Input graph.\n    \"\"\"\nedges_to_remove = []\nfor edge in zip(*g.edges()):\nif g.ndata['anomaly'][edge[0]] != 1 or g.ndata['anomaly'][edge[1]] != 1:\nedges_to_remove.append(edge)\nif edges_to_remove:\nu_list, v_list = zip(*edges_to_remove)\nedge_ids = g.edge_ids(u_list, v_list)\ng.remove_edges(edge_ids)\n</code></pre>"},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD.SGDEvaluator","title":"SGDEvaluator","text":"<pre><code>SGDEvaluator(\nbins: int = 10,\nnum_bootstrap_samples: int = 10,\nsigma: int = 1,\n)\n</code></pre> <p>Evaluate SGD_degree or SGD_cc with the built predicted and ground truth SGD Graph.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; evaluator = SGDEvaluator(bins = 10, num_bootstrap_samples = 50, sigma = 1)\n&gt;&gt;&gt; evaluator.evaluate_sgd(g_pred_list, g_truth_list, metric = 'degree')\n1.01\n&gt;&gt;&gt; evaluator.evaluate_sgd(g_pred_list, g_truth_list, metric = 'cc')\n0.34\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>bins</code> <code>int</code> <p>Number of equal-width bins in the given range when calculating SGD_cc.</p> <code>10</code> <code>num_bootstrap_samples</code> <code>int</code> <p>Number of bootstrap samples for distribution estimation.</p> <code>10</code> <code>sigma</code> <code>int</code> <p>Sigma parameter for Gaussian Earth Mover's Distance.</p> <code>1</code> Source code in <code>src\\stands\\evaluate\\SGD.py</code> <pre><code>def __init__(self, bins: int = 10, num_bootstrap_samples: int = 10, sigma: int = 1):\n\"\"\"\n    Initialize the SGDEvaluator.\n    Parameters:\n        bins (int): Number of equal-width bins in the given range when calculating SGD_cc.\n        num_bootstrap_samples (int): Number of bootstrap samples for distribution estimation.\n        sigma (int): Sigma parameter for Gaussian Earth Mover's Distance.\n    \"\"\"\nself.g_pred_list = []\nself.g_truth_list = []\nself.bins = bins\nself.num_bootstrap_samples = num_bootstrap_samples\nself.sigma = sigma\n</code></pre>"},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD.SGDEvaluator.evaluate_sgd","title":"evaluate_sgd","text":"<pre><code>evaluate_sgd(\ng_pred_list: List[dgl.DGLGraph],\ng_truth_list: List[dgl.DGLGraph],\nmetric: Literal[\"degree\", \"cc\"],\n)\n</code></pre> <p>Evaluate SGD based on predicted and ground truth graphs.</p> <p>Parameters:</p> Name Type Description Default <code>g_pred_list</code> <code>List[DGLGraph]</code> <p>List of predicted DGLGraphs.</p> required <code>g_truth_list</code> <code>List[DGLGraph]</code> <p>List of ground truth DGLGraphs.</p> required <code>metric</code> <code>Literal['degree', 'cc']</code> <p>Metric to evaluate ('degree' or 'cc').</p> required <p>Returns:</p> Type Description <code>float</code> <p>SGD score for the predicted and ground truth graphs.</p> Source code in <code>src\\stands\\evaluate\\SGD.py</code> <pre><code>def evaluate_sgd(self, g_pred_list: List[dgl.DGLGraph],\ng_truth_list: List[dgl.DGLGraph],\nmetric: Literal['degree', 'cc']):\n\"\"\"\n    Evaluate SGD based on predicted and ground truth graphs.\n    Parameters:\n        g_pred_list (List[dgl.DGLGraph]): List of predicted DGLGraphs.\n        g_truth_list (List[dgl.DGLGraph]): List of ground truth DGLGraphs.\n        metric (Literal['degree', 'cc']): Metric to evaluate ('degree' or 'cc').\n    Returns:\n        (float): SGD score for the predicted and ground truth graphs.\n    \"\"\"\nmatrix_size = int(math.sqrt(len(g_pred_list)))\nsgd_matrix = [[0] * matrix_size for _ in range(matrix_size)]\nfor idx,(g_pred, g_truth) in enumerate(zip(g_pred_list, g_truth_list)):\npred_nx_graph = dgl_to_nx(g_pred, include_classification=True)\ntrue_nx_graph = dgl_to_nx(g_truth, include_classification=False)\ndist = get_distributions_for_subsets(pred_nx_graph, true_nx_graph,\nself.bins, self.num_bootstrap_samples)\ntp_count = torch.sum(g_pred.ndata['classification'] == 1).item()\nfn_count = torch.sum(g_pred.ndata['classification'] == 3).item()\nweight = tp_count / (tp_count + fn_count)\nif metric == 'degree':\npred_tp_fp_key = 'Predicted TP+FP Degree'\ngt_tp_fp_key = 'Ground Truth TP+FP Degree'\npred_tp_fn_key = 'Predicted TP+FN Degree'\ngt_tp_fn_key = 'Ground Truth TP+FN Degree'\nelif metric == 'cc':\npred_tp_fp_key = 'Predicted TP+FP Clustering'\ngt_tp_fp_key = 'Ground Truth TP+FP Clustering'\npred_tp_fn_key = 'Predicted TP+FN Clustering'\ngt_tp_fn_key = 'Ground Truth TP+FN Clustering'\nelse:\nraise ValueError(\"Invalid metric!\")\n# TP&amp;FP\npred_tp_fp_dist = dist[pred_tp_fp_key]\ngt_tp_fp_dist = dist[gt_tp_fp_key]\nmmd_tp_fp = compute_mmd(gt_tp_fp_dist, pred_tp_fp_dist, kernel=gaussian_emd, sigma=self.sigma)\n# TP&amp;FN\npred_tp_fn_dist = dist[pred_tp_fn_key]\ngt_tp_fn_dist = dist[gt_tp_fn_key]\nmmd_tp_fn = compute_mmd(gt_tp_fn_dist, pred_tp_fn_dist, kernel=gaussian_emd, sigma=self.sigma)\nsgd = weight * mmd_tp_fp + (1 - weight) * mmd_tp_fn\n# save to matrix\nrow = idx // matrix_size\ncol = idx % matrix_size\nsgd_matrix[row][col] = sgd\nif matrix_size == 1:\nreturn sgd\nelse:\nassignment_matrix = self.solve_assignment_problems(sgd_matrix)\nSGD_list = self.get_assigned_values(sgd_matrix, assignment_matrix)\nreturn np.average(SGD_list)\n</code></pre>"},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD.SGDEvaluator.get_assigned_values","title":"get_assigned_values","text":"<pre><code>get_assigned_values(\nsgd_matrix: List[List[float]],\nassignment_matrix: List[List[int]],\n)\n</code></pre> <p>Get assigned values from the SGD matrix and assignment matrix.</p> <p>Parameters:</p> Name Type Description Default <code>sgd_matrix</code> <code>List[List[float]]</code> <p>Matrix of SGD values.</p> required <code>assignment_matrix</code> <code>List[List[int]]</code> <p>Assignment matrix indicating optimal assignments.</p> required <p>Returns:</p> Type Description <code>List[float]</code> <p>List of dictionaries containing assigned values.</p> Source code in <code>src\\stands\\evaluate\\SGD.py</code> <pre><code>def get_assigned_values(self, sgd_matrix: List[List[float]], assignment_matrix: List[List[int]]):\n\"\"\"\n    Get assigned values from the SGD matrix and assignment matrix.\n    Parameters:\n        sgd_matrix (List[List[float]]): Matrix of SGD values.\n        assignment_matrix (List[List[int]]): Assignment matrix indicating optimal assignments.\n    Returns:\n        (List[float]): List of dictionaries containing assigned values.\n    \"\"\"\nassigned_values = []\nfor i,row in enumerate(assignment_matrix):\nfor j, assignment in enumerate(row):\nif assignment == 1:\nassigned_values.append(sgd_matrix[i][j])\nreturn assigned_values\n</code></pre>"},{"location":"reference/stands/evaluate/SGD/#stands.evaluate.SGD.SGDEvaluator.solve_assignment_problems","title":"solve_assignment_problems","text":"<pre><code>solve_assignment_problems(\ndistance_matrix: List[List[float]],\n)\n</code></pre> <p>Solve the Assignment Problem using the CBC solver.</p> <p>Parameters:</p> Name Type Description Default <code>distance_matrix</code> <code>List[List[float]]</code> <p>Matrix representing the costs of assignments (distance).</p> required <p>Returns:</p> Type Description <code>List[List[int]]</code> <p>Assignment matrix indicating optimal assignments.</p> Source code in <code>src\\stands\\evaluate\\SGD.py</code> <pre><code>def solve_assignment_problems(self, distance_matrix: List[List[float]]):\n\"\"\"\n    Solve the Assignment Problem using the CBC solver.\n    Parameters:\n        distance_matrix (List[List[float]]): Matrix representing the costs of assignments (distance).\n    Returns:\n        (List[List[int]]): Assignment matrix indicating optimal assignments.\n    \"\"\"\nproblem = pulp.LpProblem(\"Assignment Problem\", pulp.LpMinimize)\nrows = len(distance_matrix)\ncols = len(distance_matrix[0])\nx = [[pulp.LpVariable(f'x_{i}_{j}', cat='Binary') for j in range(cols)] for i in range(rows)]\n# target function\nproblem += pulp.lpSum(distance_matrix[i][j] * x[i][j] for i in range(rows) for j in range(cols))\n# constraints \nfor i in range(rows):\nproblem += pulp.lpSum(x[i][j] for j in range(cols)) == 1  \nfor j in range(cols):\nproblem += pulp.lpSum(x[i][j] for i in range(rows)) == 1\n# CBC solver \nsolver = pulp.PULP_CBC_CMD()\nproblem.solve(solver)\nstatus = pulp.LpStatus[problem.status]\nminimum_cost = pulp.lpSum(distance_matrix[i][j] * x[i][j].value() for i in range(rows) for j in range(cols))\nassignment_matrix = [[x[i][j].value() for j in range(cols)] for i in range(rows)]\nreturn assignment_matrix\n</code></pre>"},{"location":"reference/stands/evaluate/eval/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> eval","text":""},{"location":"reference/stands/evaluate/eval/#stands.evaluate.eval","title":"eval","text":""},{"location":"reference/stands/evaluate/eval/#stands.evaluate.eval.evaluate","title":"evaluate","text":"<pre><code>evaluate(\nmetrics: Sequence[metrics_list],\ny_true=None,\ny_score=None,\ny_pred=None,\nadata: Optional[ad.AnnData] = None,\nbatchid: Optional[str] = None,\ntypeid: Optional[str] = None,\nemb: Optional[str] = None,\nclustid: Optional[str] = None,\nspaid: Optional[str] = None,\n**kwargs\n)\n</code></pre> <p>Evaluate performance metrics based on specified evaluation metrics. Different metrics require different parameters. Here is a description of the metrics that can be calculated and the parameters they require.</p> <p>Functions:</p> Name Description <code>AUC</code> <p><code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>Precision</code> <p><code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>Recall</code> <p><code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>F1</code> <p><code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>F1*NMI</code> <p><code>y_true</code>, <code>y_pred</code>/<code>y_score</code>, <code>adata</code>, <code>typeid</code>, <code>clustid</code></p> <code>SGD_degree</code> <p><code>adata</code>, <code>spaid</code>, <code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>SGD_cc</code> <p><code>adata</code>, <code>spaid</code>, <code>y_true</code>, <code>y_pred</code>/<code>y_score</code></p> <code>ARI</code> <p><code>adata</code>, <code>typeid</code>, <code>clustid</code></p> <code>NMI</code> <p><code>adata</code>, <code>typeid</code>, <code>clustid</code></p> <code>ASW_type</code> <p><code>adata</code>, <code>typeid</code>, <code>batchid</code>, (Optional: <code>emb</code>)</p> <code>1-ASW_batch</code> <p><code>adata</code>, <code>typeid</code>, <code>batchid</code>, (Optional: <code>emb</code>)</p> <code>BatchKL</code> <p><code>adata</code>, <code>batchid</code>, (Optional: <code>emb</code>)</p> <code>iLISI</code> <p><code>adata</code>, <code>batchid</code>, (Optional: <code>emb</code>)</p> <code>cLISI</code> <p><code>adata</code>, <code>typeid</code>, (Optional: <code>emb</code>)</p> <p>Parameters:</p> Name Type Description Default <code>metrics</code> <code>Sequence[str]</code> <p>List of evaluation metrics to compute.</p> required <code>y_true</code> <code>Optional[Union[Series, ndarray]]</code> <p>True labels.</p> <code>None</code> <code>y_score</code> <code>Optional[Union[Series, ndarray]]</code> <p>Predicted scores or probabilities.</p> <code>None</code> <code>y_pred</code> <code>Optional[Union[Series, ndarray]]</code> <p>Predicted labels.</p> <code>None</code> <code>adata</code> <code>Optional[AnnData]</code> <p>Annotated data containing embeddings or clusters.</p> <code>None</code> <code>batchid</code> <code>Optional[str]</code> <p>Batch ID key in adata.obs for batch information.</p> <code>None</code> <code>typeid</code> <code>Optional[str]</code> <p>Type ID key in adata.obs for type information.</p> <code>None</code> <code>emb</code> <code>Optional[str]</code> <p>Key for embeddings in adata.obsm.</p> <code>None</code> <code>clustid</code> <code>Optional[str]</code> <p>Cluster ID key in adata.obs for clustering information.</p> <code>None</code> <code>spaid</code> <code>Optional[str]</code> <p>Spatial coordinates ID key in adata.obsm (for SGD_degree &amp; SGD_cc metrics).</p> <code>None</code> <p>Other Parameters:</p> Name Type Description <code>n_neighbors</code> <code>int</code> <p>Number of neighbors for SGD KNN graph.</p> <code>bins</code> <code>int</code> <p>Number of equal-width bins in the given range when calculating SGD_cc.</p> <code>num_bootstrap_samples</code> <code>int</code> <p>Number of bootstrap samples for distribution estimation.</p> <code>sigma</code> <code>int</code> <p>Sigma parameter for Gaussian Earth Mover's Distance.</p> <p>Returns:</p> Type Description <code>Union[Tuple[float], float]</code> <p>Depending on the number of specified metrics, returns a tuple of metric values or a single metric value.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>In the anomaly detection, it doesn't specify <code>y_score</code> or <code>y_pred</code>.</p> Note <p>SGD_degree &amp; SGD_cc are available for both anomaly detection and subtyping tasks.  They will automatically determine the category based on the types of anomalies in y_true eliminating the need for additional parameters to specify whether it is the subtyping task.</p> Source code in <code>src\\stands\\evaluate\\eval.py</code> <pre><code>@clear_warnings\ndef evaluate(metrics: Sequence[metrics_list],\ny_true=None, y_score=None, y_pred=None,\nadata: Optional[ad.AnnData]=None,\nbatchid: Optional[str]=None, typeid: Optional[str]=None,\nemb: Optional[str] = None, clustid: Optional[str] = None,\nspaid: Optional[str] = None, **kwargs):\n\"\"\"\n    Evaluate performance metrics based on specified evaluation metrics.\n    Different metrics require different parameters.\n    Here is a description of the metrics that can be calculated and the parameters they require.\n    Functions:\n        AUC: `y_true`, `y_pred`/`y_score`\n        Precision: `y_true`, `y_pred`/`y_score`\n        Recall: `y_true`, `y_pred`/`y_score`\n        F1: `y_true`, `y_pred`/`y_score`\n        F1*NMI: `y_true`, `y_pred`/`y_score`, `adata`, `typeid`, `clustid`\n        SGD_degree: `adata`, `spaid`, `y_true`, `y_pred`/`y_score`\n        SGD_cc: `adata`, `spaid`, `y_true`, `y_pred`/`y_score`\n        ARI: `adata`, `typeid`, `clustid`\n        NMI: `adata`, `typeid`, `clustid`\n        ASW_type: `adata`, `typeid`, `batchid`, (Optional: `emb`)\n        1-ASW_batch: `adata`, `typeid`, `batchid`, (Optional: `emb`)\n        BatchKL: `adata`, `batchid`, (Optional: `emb`)\n        iLISI: `adata`, `batchid`, (Optional: `emb`)\n        cLISI: `adata`, `typeid`, (Optional: `emb`)\n    Parameters:\n        metrics (Sequence[str]): List of evaluation metrics to compute.\n        y_true (Optional[Union[pd.Series, np.ndarray]]): True labels.\n        y_score (Optional[Union[pd.Series, np.ndarray]]): Predicted scores or probabilities.\n        y_pred (Optional[Union[pd.Series, np.ndarray]]): Predicted labels.\n        adata (Optional[ad.AnnData]): Annotated data containing embeddings or clusters.\n        batchid (Optional[str]): Batch ID key in adata.obs for batch information.\n        typeid (Optional[str]): Type ID key in adata.obs for type information.\n        emb (Optional[str]): Key for embeddings in adata.obsm.\n        clustid (Optional[str]): Cluster ID key in adata.obs for clustering information.\n        spaid (Optional[str]): Spatial coordinates ID key in adata.obsm (for SGD_degree &amp; SGD_cc metrics).\n    Other Parameters:\n        n_neighbors (int): Number of neighbors for SGD KNN graph.\n        bins (int): Number of equal-width bins in the given range when calculating SGD_cc.\n        num_bootstrap_samples (int): Number of bootstrap samples for distribution estimation.\n        sigma (int): Sigma parameter for Gaussian Earth Mover's Distance.\n    Returns:\n        (Union[Tuple[float], float]): Depending on the number of specified metrics, returns a tuple of metric values or a single metric value.\n    Raises:\n        RuntimeError: In the anomaly detection, it doesn't specify `y_score` or `y_pred`.\n    Note:\n        SGD_degree &amp; SGD_cc are available for both anomaly detection and subtyping tasks. \n        They will automatically determine the category based on the types of anomalies in y_true\n        eliminating the need for additional parameters to specify whether it is the subtyping task.\n    \"\"\"\ndata = {}\nif  y_true is not None:\ny_true = pd.Series(y_true)\nif y_score is not None:\ny_score = pd.Series(y_score)\nratio = 100.0 * len(np.where(y_true == 0)[0]) / len(y_true)\nthres = np.percentile(y_score, ratio)\ny_pred = (y_score &gt;= thres).astype(int)\ny_true = y_true.astype(int)\nelif y_pred is not None:\ny_pred = pd.Series(y_pred).astype(int)\nelse:\nraise RuntimeError('Please input y_score or y_pred!')\ndata.update({'y_true': y_true, 'y_score': y_score, 'y_pred': y_pred})\n# for SGD_degree and SGD_cc metrics\nif (adata is not None) and (spaid is not None):\ndata.update({'spatial': adata.obsm[spaid]})\nif adata is not None:\nif emb is not None:\ncorrect = adata.obsm[emb]\ndata.update({'correct': correct})\nelif ['ASW_type', '1-ASW_batch', 'BatchKL', 'iLISI', 'cLISI'] in metrics:\nsc.tl.tsne(adata, random_state=0, use_fast_tsne=False)\ncorrect = adata.obsm['X_tsne']\ndata.update({'correct': correct})\nif batchid is not None:\n_, idx = np.unique(adata.obs[batchid].values, return_inverse=True)\ndata.update({'batch': idx})\nif typeid is not None:\n_, idx = np.unique(adata.obs[typeid].values, return_inverse=True)\ndata.update({'type': idx})\nif clustid is not None:\n_, idx = np.unique(adata.obs[clustid].values, return_inverse=True)\ndata.update({'cluster': idx})\nmethod = {\n'AUC': eval_AUC,\n'Precision': eval_P, \n'Recall': eval_R, \n'F1': eval_F1,\n'F1*NMI': evla_F1NMI,\n'ARI': eval_ARI,\n'NMI': eval_NMI,\n'ASW_type': eval_ASW_type,\n'1-ASW_batch': eval_ASW_batch,\n'BatchKL': eval_BatchKL,\n'iLISI': eval_iLISI,\n'cLISI': eval_cLISI,\n'SGD_degree': eval_SGD_degree,\n'SGD_cc': eval_SGD_cc\n}\nresult = []\nfor m in metrics:\nif m in ['SGD_degree','SGD_cc']:\nr = method[m](data, **kwargs)\nelse:\nr = method[m](data)\nresult.append(r)\nif len(result) &gt;= 2:\nreturn tuple(result)\nelse:\nreturn result[0]\n</code></pre>"},{"location":"reference/stands/model/","title":"Index","text":""},{"location":"reference/stands/model/#stands.model","title":"model","text":""},{"location":"reference/stands/model/GMM/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> GMM","text":""},{"location":"reference/stands/model/GMM/#stands.model.GMM","title":"GMM","text":""},{"location":"reference/stands/model/cluster/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cluster","text":""},{"location":"reference/stands/model/cluster/#stands.model.cluster","title":"cluster","text":""},{"location":"reference/stands/model/discriminator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> discriminator","text":""},{"location":"reference/stands/model/discriminator/#stands.model.discriminator","title":"discriminator","text":""},{"location":"reference/stands/model/generator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> generator","text":""},{"location":"reference/stands/model/generator/#stands.model.generator","title":"generator","text":""},{"location":"reference/stands/model/backbone/","title":"Index","text":""},{"location":"reference/stands/model/backbone/#stands.model.backbone","title":"backbone","text":""},{"location":"reference/stands/model/backbone/extractor/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> extractor","text":""},{"location":"reference/stands/model/backbone/extractor/#stands.model.backbone.extractor","title":"extractor","text":""},{"location":"reference/stands/model/backbone/gene/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> gene","text":""},{"location":"reference/stands/model/backbone/gene/#stands.model.backbone.gene","title":"gene","text":""},{"location":"reference/stands/model/backbone/image/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> image","text":""},{"location":"reference/stands/model/backbone/image/#stands.model.backbone.image","title":"image","text":""},{"location":"reference/stands/model/backbone/layer/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> layer","text":""},{"location":"reference/stands/model/backbone/layer/#stands.model.backbone.layer","title":"layer","text":""},{"location":"tutorial/AnoBC/","title":"Tutorial 4: Align multiple ST datasets with non-overlapping domain types","text":"<p>We use STANDS to align multiple ST datasets with non-overlapping domain types. Specifically, this experiment involves a normal breast tissue dataset (10x-hNB-v07) and two breast cancer datasets (10x-hBC-G2 &amp;10x-hBC-H1) that have been curated to share all domain types, except for the cancer in situ and invasive cancer domains that are unique to 10x-hBC-G2 and 10x-hBC-H1.</p> In\u00a0[1]: Copied! <pre>import warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> import warnings warnings.filterwarnings(\"ignore\") In\u00a0[2]: Copied! <pre>import torch\nimport stands\nimport pandas as pd\nimport scanpy as sc\nimport anndata as ad\nimport matplotlib.pyplot as plt\n</pre> import torch import stands import pandas as pd import scanpy as sc import anndata as ad import matplotlib.pyplot as plt <p>We read the processed ST datasets. In the example, the demo datasets includes: 1) gene expression matrix in <code>adata.X</code>; 2) spatial coordinates in <code>adata.obsm['spatial']</code>; 3) histology image in <code>adata.uns['spatial']</code>. To make the model can read the data sucessfully, please ensure the same anndata structure as example.</p> In\u00a0[3]: Copied! <pre>path = [\n    './HumanBreast/process/V07.h5ad',\n    './HumanBreast/process/G2.h5ad',\n    './HumanBreast/process/H1.h5ad'\n]\n\nadata_list = []\nfor p in path:\n    adata = sc.read_h5ad(p)\n    adata_list.append(adata)\n</pre> path = [     './HumanBreast/process/V07.h5ad',     './HumanBreast/process/G2.h5ad',     './HumanBreast/process/H1.h5ad' ]  adata_list = [] for p in path:     adata = sc.read_h5ad(p)     adata_list.append(adata) In\u00a0[4]: Copied! <pre>adata_list\n</pre> adata_list Out[4]: <pre>[AnnData object with n_obs \u00d7 n_vars = 2086 \u00d7 3000\n     obs: 'cell_type', 'batch', 'disease'\n     uns: 'spatial'\n     obsm: 'spatial',\n AnnData object with n_obs \u00d7 n_vars = 467 \u00d7 3000\n     obs: 'cell_type', 'batch', 'disease'\n     uns: 'spatial'\n     obsm: 'spatial',\n AnnData object with n_obs \u00d7 n_vars = 613 \u00d7 3000\n     obs: 'cell_type', 'batch', 'disease'\n     uns: 'spatial'\n     obsm: 'spatial']</pre> <p>For ST input, STANDS first needs to convert the anndata data into a graph, where nodes represent each spot and edges represent the adjacency relationship between two spots. In the example, the node features of the converted graph include the gene expression vector and image patch. Additionally, if the data has been preprocessed, you should set <code>preprocess=False</code>. It is worth noting that STANDS converts data in the case of multiple datasets in a slightly different way than a single dataset.</p> In\u00a0[5]: Copied! <pre># Anomaly detection data\nref_g = stands.read(adata_list[0], patch_size=64, n_genes=3000, preprocess=False)\ntgt_g = stands.read_multi(adata_list[1:], patch_size=64, n_genes=3000, preprocess=False)\n</pre> # Anomaly detection data ref_g = stands.read(adata_list[0], patch_size=64, n_genes=3000, preprocess=False) tgt_g = stands.read_multi(adata_list[1:], patch_size=64, n_genes=3000, preprocess=False) <p>Due to the presence of domain-specific domain types (also treated as anomalies), STANDS first performs the anomaly detection module to identify these anomalies. After recording the results of the detection in <code>adata.obs['pred']</code>, it again constructs the data needed by the batch correction module</p> In\u00a0[6]: Copied! <pre>ADModel = stands.AnomalyDetect()\nADModel.fit(ref_g)\n</pre> ADModel = stands.AnomalyDetect() ADModel.fit(ref_g) <pre>Begin to train the model on reference datasets...\n</pre> <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [02:35&lt;00:00, 15.57s/it, D_Loss=1.17, G_Loss=2.65]</pre> <pre>Training has been finished.\n</pre> <pre>\n</pre> In\u00a0[7]: Copied! <pre>scores, labels = ADModel.predict(tgt_g)\n</pre> scores, labels = ADModel.predict(tgt_g) <pre>Detect anomalous spots on target dataset...\nAnomalous spots have been detected.\n\n</pre> In\u00a0[8]: Copied! <pre>adata_list[0].obs['pred'] = 0\nadata_list[1].obs['pred'] = labels[0]\nadata_list[2].obs['pred'] = labels[1]\n</pre> adata_list[0].obs['pred'] = 0 adata_list[1].obs['pred'] = labels[0] adata_list[2].obs['pred'] = labels[1] In\u00a0[9]: Copied! <pre>adata_g = stands.read_multi(adata_list, patch_size=64, n_genes=3000, preprocess=False)\n</pre> adata_g = stands.read_multi(adata_list, patch_size=64, n_genes=3000, preprocess=False) <p>After inputting the converted data and generator into <code>fit</code>, STANDS starts to train the style-transfer GAN. After training, the corrected data will directly replace <code>adata.X</code>, and <code>fit</code> will automatically return <code>adata</code> as output.</p> In\u00a0[10]: Copied! <pre>BCModel = stands.BatchAlign(GPU='cuda:1')\nadata = BCModel.fit(adata_g, ADModel.G)\n</pre> BCModel = stands.BatchAlign(GPU='cuda:1') adata = BCModel.fit(adata_g, ADModel.G) <pre>Begin to find Kin Pairs between datasets...\n</pre> <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:42&lt;00:00, 23.30it/s, D_Loss=-.128, G_Loss=5.52]\n</pre> <pre>Kin Pairs have been found.\n\nBegin to correct spatial transcriptomics datasets...\n</pre> <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:10&lt;00:00,  1.09s/it, D_Loss=0.172, G_Loss=1.71]</pre> <pre>Datasets have been corrected.\n\n</pre> <pre>\n</pre> <p>STANDS integrates several evaluation metrics in <code>stands.evaluate</code> for anomaly detection tasks, which can be used very easily and directly. Note that because of the presence of domain-specific domain types, if we need to explore the impact of their presence on the batch correction task, we need to remove them before calculating the metrics; this is because their presence itself greatly affects metrics such as BatchKL, and we should rather We should explore whether their presence affects the batch correction of domain-invariant domain types.</p> In\u00a0[11]: Copied! <pre>sc.pp.normalize_total(adata)\nsc.pp.log1p(adata)\nsc.pp.pca(adata)\nsc.pp.neighbors(adata)\nsc.tl.umap(adata)\n</pre> sc.pp.normalize_total(adata) sc.pp.log1p(adata) sc.pp.pca(adata) sc.pp.neighbors(adata) sc.tl.umap(adata) <pre>2024-06-03 18:50:11.193214: I tensorflow/core/util/util.cc:169] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n</pre> In\u00a0[12]: Copied! <pre>metrics = ['ASW_type', '1-ASW_batch', 'BatchKL', 'iLISI', 'cLISI']\nresult = stands.evaluate(metrics, adata=adata, spaid='spatial', \n                         batchid='batch', typeid='cell_type', emb='X_umap')\n</pre> metrics = ['ASW_type', '1-ASW_batch', 'BatchKL', 'iLISI', 'cLISI'] result = stands.evaluate(metrics, adata=adata, spaid='spatial',                           batchid='batch', typeid='cell_type', emb='X_umap') In\u00a0[13]: Copied! <pre>pd.DataFrame(zip(metrics, result))\n</pre> pd.DataFrame(zip(metrics, result)) Out[13]: 0 1 0 ASW_type 0.567508 1 1-ASW_batch 0.967600 2 BatchKL 0.377476 3 iLISI 1.643172 4 cLISI 1.129224 <p>We use the umap to visualise the results of batch alignment.</p> In\u00a0[14]: Copied! <pre>original = ad.concat(adata_list)\nsc.pp.normalize_total(original)\nsc.pp.log1p(original)\nsc.pp.pca(original)\nsc.pp.neighbors(original)\nsc.tl.umap(original)\n</pre> original = ad.concat(adata_list) sc.pp.normalize_total(original) sc.pp.log1p(original) sc.pp.pca(original) sc.pp.neighbors(original) sc.tl.umap(original) In\u00a0[15]: Copied! <pre>original.obs['batch'] = original.obs['batch'].astype('category')\nax = sc.pl.umap(original, color=['batch', 'cell_type'], show=False)\n\nax[0].legend(fontsize=12)\nax[0].set_title('Original', fontsize=18)\nax[0].set_xlabel('UMAP 1', fontsize=14)\nax[0].set_ylabel('UMAP 2', fontsize=14)\n\nax[1].legend(fontsize=12)\nax[1].set_title('Original', fontsize=18)\nax[1].set_xlabel('UMAP 1', fontsize=14)\nax[1].set_ylabel('UMAP 2', fontsize=14)\n\nplt.show()\n</pre> original.obs['batch'] = original.obs['batch'].astype('category') ax = sc.pl.umap(original, color=['batch', 'cell_type'], show=False)  ax[0].legend(fontsize=12) ax[0].set_title('Original', fontsize=18) ax[0].set_xlabel('UMAP 1', fontsize=14) ax[0].set_ylabel('UMAP 2', fontsize=14)  ax[1].legend(fontsize=12) ax[1].set_title('Original', fontsize=18) ax[1].set_xlabel('UMAP 1', fontsize=14) ax[1].set_ylabel('UMAP 2', fontsize=14)  plt.show() In\u00a0[16]: Copied! <pre>adata.obs['batch'] = adata.obs['batch'].astype('category')\nax = sc.pl.umap(adata, color=['batch', 'cell_type'], show=False)\n\nax[0].legend(fontsize=12)\nax[0].set_title('STANDS', fontsize=18)\nax[0].set_xlabel('UMAP 1', fontsize=14)\nax[0].set_ylabel('UMAP 2', fontsize=14)\n\nax[1].legend(fontsize=12)\nax[1].set_title('STANDS', fontsize=18)\nax[1].set_xlabel('UMAP 1', fontsize=14)\nax[1].set_ylabel('UMAP 2', fontsize=14)\n\nplt.show()\n</pre> adata.obs['batch'] = adata.obs['batch'].astype('category') ax = sc.pl.umap(adata, color=['batch', 'cell_type'], show=False)  ax[0].legend(fontsize=12) ax[0].set_title('STANDS', fontsize=18) ax[0].set_xlabel('UMAP 1', fontsize=14) ax[0].set_ylabel('UMAP 2', fontsize=14)  ax[1].legend(fontsize=12) ax[1].set_title('STANDS', fontsize=18) ax[1].set_xlabel('UMAP 1', fontsize=14) ax[1].set_ylabel('UMAP 2', fontsize=14)  plt.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"tutorial/AnoBC/#tutorial-4-align-multiple-st-datasets-with-non-overlapping-domain-types","title":"Tutorial 4: Align multiple ST datasets with non-overlapping domain types\u00b6","text":""},{"location":"tutorial/AnoBC/#loading-package","title":"Loading package\u00b6","text":""},{"location":"tutorial/AnoBC/#reading-st-data","title":"Reading ST data\u00b6","text":""},{"location":"tutorial/AnoBC/#converting-data","title":"Converting data\u00b6","text":""},{"location":"tutorial/AnoBC/#detecting-anomaly-domains","title":"Detecting anomaly domains\u00b6","text":""},{"location":"tutorial/AnoBC/#training-the-model","title":"Training the model\u00b6","text":""},{"location":"tutorial/AnoBC/#evaluation","title":"Evaluation\u00b6","text":""},{"location":"tutorial/AnoBC/#visualization","title":"Visualization\u00b6","text":""},{"location":"tutorial/MultiAD/","title":"Tutorial 2: Identify cancerous domains across multiple ST datasets concurrently","text":"<p>We use STANDS to identify anomalous tissue domains across multiple ST datasets concurrently. Specifically, this experiment involves three 10x Visium reference datasets (10x-hNB-v05, 10x-hNB-v06, 10x-hNB-v07), which are prepared from healthy human breast tissues and encompass four normal domain types, and two 10x Visium target datasets (10x-hBC-G2, 10x-hBC-H1), which are prepared from human breast cancer tissues and encompass two additional shared carcinogenic domain types including the cancer in situ (CIS) and the invasive cancer (IC) domains.</p> In\u00a0[1]: Copied! <pre>import warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> import warnings warnings.filterwarnings(\"ignore\") In\u00a0[2]: Copied! <pre>import torch\nimport stands\nimport pandas as pd\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n</pre> import torch import stands import pandas as pd import scanpy as sc import matplotlib.pyplot as plt <p>We read the processed ST datasets. In the example, the demo datasets includes: 1) gene expression matrix in <code>adata.X</code>; 2) spatial coordinates in <code>adata.obsm['spatial']</code>; 3) histology image in <code>adata.uns['spatial']</code>. To make the model can read the data sucessfully, please ensure the same anndata structure as example.</p> In\u00a0[3]: Copied! <pre>path = [\n    './HumanBreast/process/V05.h5ad',\n    './HumanBreast/process/V06.h5ad',\n    './HumanBreast/process/V07.h5ad'\n]\n\nref_list = []\nfor p in path:\n    ref = sc.read_h5ad(p)\n    ref_list.append(ref)\n</pre> path = [     './HumanBreast/process/V05.h5ad',     './HumanBreast/process/V06.h5ad',     './HumanBreast/process/V07.h5ad' ]  ref_list = [] for p in path:     ref = sc.read_h5ad(p)     ref_list.append(ref) In\u00a0[4]: Copied! <pre>path = [\n    './HumanBreast/process/G2.h5ad',\n    './HumanBreast/process/H1.h5ad',\n]\n\ntgt_list = []\nfor p in path:\n    tgt = sc.read_h5ad(p)\n    tgt_list.append(tgt)\n</pre> path = [     './HumanBreast/process/G2.h5ad',     './HumanBreast/process/H1.h5ad', ]  tgt_list = [] for p in path:     tgt = sc.read_h5ad(p)     tgt_list.append(tgt) In\u00a0[5]: Copied! <pre>ref_list\n</pre> ref_list Out[5]: <pre>[AnnData object with n_obs \u00d7 n_vars = 2224 \u00d7 3000\n     obs: 'cell_type', 'batch', 'disease'\n     uns: 'spatial'\n     obsm: 'spatial',\n AnnData object with n_obs \u00d7 n_vars = 3037 \u00d7 3000\n     obs: 'cell_type', 'batch', 'disease'\n     uns: 'spatial'\n     obsm: 'spatial',\n AnnData object with n_obs \u00d7 n_vars = 2086 \u00d7 3000\n     obs: 'cell_type', 'batch', 'disease'\n     uns: 'spatial'\n     obsm: 'spatial']</pre> In\u00a0[6]: Copied! <pre>tgt_list\n</pre> tgt_list Out[6]: <pre>[AnnData object with n_obs \u00d7 n_vars = 467 \u00d7 3000\n     obs: 'cell_type', 'batch', 'disease'\n     uns: 'spatial'\n     obsm: 'spatial',\n AnnData object with n_obs \u00d7 n_vars = 613 \u00d7 3000\n     obs: 'cell_type', 'batch', 'disease'\n     uns: 'spatial'\n     obsm: 'spatial']</pre> <p>For ST input, STANDS first needs to convert the anndata data into a graph, where nodes represent each spot and edges represent the adjacency relationship between two spots. In the example, the node features of the converted graph include the gene expression vector and image patch. Additionally, if the data has been preprocessed, you should set <code>preprocess=False</code>. It is worth noting that STANDS converts data in the case of multiple datasets in a slightly different way than a single dataset.</p> In\u00a0[7]: Copied! <pre>ref_g = stands.read_multi(ref_list, patch_size=64, n_genes=3000, preprocess=False)\ntgt_g = stands.read_multi(tgt_list, patch_size=64, n_genes=3000, preprocess=False)\n</pre> ref_g = stands.read_multi(ref_list, patch_size=64, n_genes=3000, preprocess=False) tgt_g = stands.read_multi(tgt_list, patch_size=64, n_genes=3000, preprocess=False) <p>After inputting the converted reference data into <code>fit</code>, STANDS starts to train the multimodal GAN. After training and inputting the converted target data into <code>predict</code>, STANDS conveniently detects the anomalies and outputs anomaly scores for each spot, where a higher score indicates a more likely anomaly. In addition, if <code>run_gmm=True</code> is specified in <code>predict</code>, STANDS will also use the GMM algorithm to determine the thresholds for anomalous and normal, and return the binary classification results.</p> In\u00a0[8]: Copied! <pre>model = stands.AnomalyDetect()\nmodel.fit(ref_g)\n</pre> model = stands.AnomalyDetect() model.fit(ref_g) <pre>Begin to train the model on reference datasets...\n</pre> <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [09:46&lt;00:00, 58.70s/it, D_Loss=-1.58, G_Loss=4.03]</pre> <pre>Training has been finished.\n</pre> <pre>\n</pre> In\u00a0[9]: Copied! <pre>scores, labels = model.predict(tgt_g)\n</pre> scores, labels = model.predict(tgt_g) <pre>Detect anomalous spots on target dataset...\nAnomalous spots have been detected.\n\n</pre> In\u00a0[10]: Copied! <pre># store the results\ntgt1, tgt2 = tgt_list\ntgt1.obs['score'] = scores[0]\ntgt1.obs['pred'] = labels[0]\ntgt2.obs['score'] = scores[1]\ntgt2.obs['pred'] = labels[1]\n</pre> # store the results tgt1, tgt2 = tgt_list tgt1.obs['score'] = scores[0] tgt1.obs['pred'] = labels[0] tgt2.obs['score'] = scores[1] tgt2.obs['pred'] = labels[1] <p>The model trained in the anomaly detection phase will be used as the extractor for the subsequent tasks. Thus saving the weights will help to improve the performance of the subsequent tasks.</p> In\u00a0[11]: Copied! <pre>torch.save(model.G.state_dict(), 'generator.pth')\n</pre> torch.save(model.G.state_dict(), 'generator.pth') <p>STANDS integrates several evaluation metrics in <code>stands.evaluate</code> for anomaly detection tasks, which can be used very easily and directly.</p> In\u00a0[12]: Copied! <pre>metrics = ['Accuracy', 'F1', 'SGD_degree', 'SGD_cc']\nresult = stands.evaluate(metrics, adata=tgt1, spaid='spatial', y_true=tgt1.obs['disease'], \n                         y_pred=tgt1.obs['pred'], y_score=tgt1.obs['score'])\n</pre> metrics = ['Accuracy', 'F1', 'SGD_degree', 'SGD_cc'] result = stands.evaluate(metrics, adata=tgt1, spaid='spatial', y_true=tgt1.obs['disease'],                           y_pred=tgt1.obs['pred'], y_score=tgt1.obs['score']) In\u00a0[13]: Copied! <pre>pd.DataFrame(zip(metrics, result))\n</pre> pd.DataFrame(zip(metrics, result)) Out[13]: 0 1 0 Accuracy 0.845824 1 F1 0.775000 2 SGD_degree 0.591077 3 SGD_cc 0.299607 In\u00a0[14]: Copied! <pre>metrics = ['Accuracy', 'F1', 'SGD_degree', 'SGD_cc']\nresult = stands.evaluate(metrics, adata=tgt2, spaid='spatial', y_true=tgt2.obs['disease'], \n                         y_pred=tgt2.obs['pred'], y_score=tgt2.obs['score'])\n</pre> metrics = ['Accuracy', 'F1', 'SGD_degree', 'SGD_cc'] result = stands.evaluate(metrics, adata=tgt2, spaid='spatial', y_true=tgt2.obs['disease'],                           y_pred=tgt2.obs['pred'], y_score=tgt2.obs['score']) In\u00a0[15]: Copied! <pre>pd.DataFrame(zip(metrics, result))\n</pre> pd.DataFrame(zip(metrics, result)) Out[15]: 0 1 0 Accuracy 0.833605 1 F1 0.727273 2 SGD_degree 0.844450 3 SGD_cc 0.310134 <p>We use the spatial map to visualise the results of anomaly detection.</p> In\u00a0[16]: Copied! <pre>tgt1.obs['pred'] = tgt1.obs['pred'].astype('category')\ntgt1.obs['disease'] = tgt1.obs['disease'].astype('category')\n\nax = sc.pl.spatial(tgt1, color=['pred', 'disease'], s=90, show=False, crop_coord=(0, 8700, 800, 7600))\n\nax[0].legend(['Normal', 'Anomaly'], fontsize=12)\nax[0].set_title('STANDS', fontsize=18)\nax[0].set_xlabel('Saptial 1', fontsize=14)\nax[0].set_ylabel('Saptial 2', fontsize=14)\n\nax[1].legend(['Normal', 'Anomaly'], fontsize=12)\nax[1].set_title('Ground Truth', fontsize=18)\nax[1].set_xlabel('Saptial 1', fontsize=14)\nax[1].set_ylabel('Saptial 2', fontsize=14)\n\nplt.show()\n</pre> tgt1.obs['pred'] = tgt1.obs['pred'].astype('category') tgt1.obs['disease'] = tgt1.obs['disease'].astype('category')  ax = sc.pl.spatial(tgt1, color=['pred', 'disease'], s=90, show=False, crop_coord=(0, 8700, 800, 7600))  ax[0].legend(['Normal', 'Anomaly'], fontsize=12) ax[0].set_title('STANDS', fontsize=18) ax[0].set_xlabel('Saptial 1', fontsize=14) ax[0].set_ylabel('Saptial 2', fontsize=14)  ax[1].legend(['Normal', 'Anomaly'], fontsize=12) ax[1].set_title('Ground Truth', fontsize=18) ax[1].set_xlabel('Saptial 1', fontsize=14) ax[1].set_ylabel('Saptial 2', fontsize=14)  plt.show() In\u00a0[17]: Copied! <pre>ax = sc.pl.spatial(tgt1, color=['score'], s=90, show=False, crop_coord=(0, 8700, 800, 7600))\nax[0].set_title('Anomaly Score', fontsize=18)\nax[0].set_xlabel('Saptial 1', fontsize=14)\nax[0].set_ylabel('Saptial 2', fontsize=14)\nplt.show()\n</pre> ax = sc.pl.spatial(tgt1, color=['score'], s=90, show=False, crop_coord=(0, 8700, 800, 7600)) ax[0].set_title('Anomaly Score', fontsize=18) ax[0].set_xlabel('Saptial 1', fontsize=14) ax[0].set_ylabel('Saptial 2', fontsize=14) plt.show() In\u00a0[18]: Copied! <pre>tgt2.obs['pred'] = tgt2.obs['pred'].astype('category')\ntgt2.obs['disease'] = tgt2.obs['disease'].astype('category')\n\nax = sc.pl.spatial(tgt2, color=['pred', 'disease'], s=90, show=False, crop_coord=(100, 9200, 2000, 9800))\n\nax[0].legend(['Normal', 'Anomaly'], fontsize=12)\nax[0].set_title('STANDS', fontsize=18)\nax[0].set_xlabel('Saptial 1', fontsize=14)\nax[0].set_ylabel('Saptial 2', fontsize=14)\n\nax[1].legend(['Normal', 'Anomaly'], fontsize=12)\nax[1].set_title('Ground Truth', fontsize=18)\nax[1].set_xlabel('Saptial 1', fontsize=14)\nax[1].set_ylabel('Saptial 2', fontsize=14)\n\nplt.show()\n</pre> tgt2.obs['pred'] = tgt2.obs['pred'].astype('category') tgt2.obs['disease'] = tgt2.obs['disease'].astype('category')  ax = sc.pl.spatial(tgt2, color=['pred', 'disease'], s=90, show=False, crop_coord=(100, 9200, 2000, 9800))  ax[0].legend(['Normal', 'Anomaly'], fontsize=12) ax[0].set_title('STANDS', fontsize=18) ax[0].set_xlabel('Saptial 1', fontsize=14) ax[0].set_ylabel('Saptial 2', fontsize=14)  ax[1].legend(['Normal', 'Anomaly'], fontsize=12) ax[1].set_title('Ground Truth', fontsize=18) ax[1].set_xlabel('Saptial 1', fontsize=14) ax[1].set_ylabel('Saptial 2', fontsize=14)  plt.show() In\u00a0[19]: Copied! <pre>ax = sc.pl.spatial(tgt2, color=['score'], s=90, show=False, crop_coord=(100, 9200, 2000, 9800))\nax[0].set_title('Anomaly Score', fontsize=18)\nax[0].set_xlabel('Saptial 1', fontsize=14)\nax[0].set_ylabel('Saptial 2', fontsize=14)\nplt.show()\n</pre> ax = sc.pl.spatial(tgt2, color=['score'], s=90, show=False, crop_coord=(100, 9200, 2000, 9800)) ax[0].set_title('Anomaly Score', fontsize=18) ax[0].set_xlabel('Saptial 1', fontsize=14) ax[0].set_ylabel('Saptial 2', fontsize=14) plt.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"tutorial/MultiAD/#tutorial-2-identify-cancerous-domains-across-multiple-st-datasets-concurrently","title":"Tutorial 2: Identify cancerous domains across multiple ST datasets concurrently\u00b6","text":""},{"location":"tutorial/MultiAD/#loading-package","title":"Loading package\u00b6","text":""},{"location":"tutorial/MultiAD/#reading-st-data","title":"Reading ST data\u00b6","text":""},{"location":"tutorial/MultiAD/#converting-data","title":"Converting data\u00b6","text":""},{"location":"tutorial/MultiAD/#training-the-model","title":"Training the model\u00b6","text":""},{"location":"tutorial/MultiAD/#saving-the-weight","title":"Saving the weight\u00b6","text":""},{"location":"tutorial/MultiAD/#evaluation","title":"Evaluation\u00b6","text":""},{"location":"tutorial/MultiAD/#visualization","title":"Visualization\u00b6","text":""},{"location":"tutorial/MultiAS/","title":"Tutorial 6: Discern biologically distinct anomalous tissue subdomains across multiple ST datasets","text":"<p>We use STANDS to discern biologically distinct anomalous tissue subdomains in multiple ST datasets. Specifically, this experiment involves a normal breast tissue dataset (10x-hNB-v07) and two breast cancer datasets (10x-hBC-G2, 10x-hBC-H1). The cancer in situ and invasive cancer shared in 10x-hBC-G2 and 10x-hBC-H1 are regarded as the anomaly subdomains.</p> In\u00a0[1]: Copied! <pre>import warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> import warnings warnings.filterwarnings(\"ignore\") In\u00a0[2]: Copied! <pre>import torch\nimport stands\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n</pre> import torch import stands import numpy as np import pandas as pd import scanpy as sc import matplotlib.pyplot as plt <p>We read the processed ST datasets. In the example, the demo datasets includes: 1) gene expression matrix in <code>adata.X</code>; 2) spatial coordinates in <code>adata.obsm['spatial']</code>; 3) histology image in <code>adata.uns['spatial']</code>. To make the model can read the data sucessfully, please ensure the same anndata structure as example.</p> In\u00a0[3]: Copied! <pre>ref = sc.read_h5ad('./HumanBreast/process/V07.h5ad')\ntgt1 = sc.read_h5ad('./HumanBreast/process/G2.h5ad')\ntgt2 = sc.read_h5ad('./HumanBreast/process/H1.h5ad')\n</pre> ref = sc.read_h5ad('./HumanBreast/process/V07.h5ad') tgt1 = sc.read_h5ad('./HumanBreast/process/G2.h5ad') tgt2 = sc.read_h5ad('./HumanBreast/process/H1.h5ad') In\u00a0[4]: Copied! <pre>ref\n</pre> ref Out[4]: <pre>AnnData object with n_obs \u00d7 n_vars = 2086 \u00d7 3000\n    obs: 'cell_type', 'batch', 'disease'\n    uns: 'spatial'\n    obsm: 'spatial'</pre> In\u00a0[5]: Copied! <pre>tgt1\n</pre> tgt1 Out[5]: <pre>AnnData object with n_obs \u00d7 n_vars = 467 \u00d7 3000\n    obs: 'cell_type', 'batch', 'disease'\n    uns: 'spatial'\n    obsm: 'spatial'</pre> In\u00a0[6]: Copied! <pre>tgt2\n</pre> tgt2 Out[6]: <pre>AnnData object with n_obs \u00d7 n_vars = 613 \u00d7 3000\n    obs: 'cell_type', 'batch', 'disease'\n    uns: 'spatial'\n    obsm: 'spatial'</pre> <p>For ST input, STANDS first needs to convert the anndata data into a graph, where nodes represent each spot and edges represent the adjacency relationship between two spots. In the example, the node features of the converted graph include the gene expression vector and image patch. Additionally, if the data has been preprocessed, you should set <code>preprocess=False</code>.</p> In\u00a0[7]: Copied! <pre>ref_g = stands.read(ref, patch_size=64, n_genes=3000, preprocess=False)\ntgt_g = stands.read_multi([tgt1, tgt2], patch_size=64, n_genes=3000, preprocess=False)\n</pre> ref_g = stands.read(ref, patch_size=64, n_genes=3000, preprocess=False) tgt_g = stands.read_multi([tgt1, tgt2], patch_size=64, n_genes=3000, preprocess=False) <p>The anomaly subtype module of STANDS is implemented based on the anomaly detection module. Firstly, the anomalous regions on the target dataset need to be detected using STANDS.</p> In\u00a0[8]: Copied! <pre>ADModel = stands.AnomalyDetect()\nADModel.fit(ref_g)\n</pre> ADModel = stands.AnomalyDetect() ADModel.fit(ref_g) <pre>Begin to train the model on reference datasets...\n</pre> <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [02:35&lt;00:00, 15.58s/it, D_Loss=0.911, G_Loss=2.57]</pre> <pre>Training has been finished.\n</pre> <pre>\n</pre> In\u00a0[9]: Copied! <pre>scores, labels = ADModel.predict(tgt_g)\n</pre> scores, labels = ADModel.predict(tgt_g) <pre>Detect anomalous spots on target dataset...\nAnomalous spots have been detected.\n\n</pre> In\u00a0[10]: Copied! <pre># store the results\nref.obs['pred'] = 0\ntgt1.obs['pred'] = labels[0]\ntgt2.obs['pred'] = labels[1]\n</pre> # store the results ref.obs['pred'] = 0 tgt1.obs['pred'] = labels[0] tgt2.obs['pred'] = labels[1] In\u00a0[11]: Copied! <pre>adata_g = stands.read_multi([ref, tgt1, tgt2], patch_size=64, n_genes=3000, preprocess=False)\n</pre> adata_g = stands.read_multi([ref, tgt1, tgt2], patch_size=64, n_genes=3000, preprocess=False) <p>The results of anomalous subtype detection can be affected due to the batch effect that exists between target datasets. Therefore, we align these datasets first.</p> In\u00a0[12]: Copied! <pre>BCModel = stands.BatchAlign(GPU='cuda:1')\nadata = BCModel.fit(adata_g, ADModel.G)\n</pre> BCModel = stands.BatchAlign(GPU='cuda:1') adata = BCModel.fit(adata_g, ADModel.G) <pre>Begin to find Kin Pairs between datasets...\n</pre> <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:41&lt;00:00, 24.19it/s, D_Loss=-.125, G_Loss=5.51]\n</pre> <pre>Kin Pairs have been found.\n\nBegin to correct spatial transcriptomics datasets...\n</pre> <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:10&lt;00:00,  1.10s/it, D_Loss=0.156, G_Loss=1.72]</pre> <pre>Datasets have been corrected.\n\n</pre> <pre>\n</pre> In\u00a0[13]: Copied! <pre>anomaly = adata[adata.obs['pred'] == 1]\n\nanomaly1 = anomaly[anomaly.obs['batch']==1]\nanomaly1.uns = tgt1.uns\nanomaly1.obsm = tgt1[tgt1.obs['pred'] == 1].obsm\n\nanomaly2 = anomaly[anomaly.obs['batch']==2]\nanomaly2.uns = tgt2.uns\nanomaly2.obsm = tgt2[tgt2.obs['pred'] == 1].obsm\n\nanomaly_list = [anomaly1, anomaly2]\n</pre> anomaly = adata[adata.obs['pred'] == 1]  anomaly1 = anomaly[anomaly.obs['batch']==1] anomaly1.uns = tgt1.uns anomaly1.obsm = tgt1[tgt1.obs['pred'] == 1].obsm  anomaly2 = anomaly[anomaly.obs['batch']==2] anomaly2.uns = tgt2.uns anomaly2.obsm = tgt2[tgt2.obs['pred'] == 1].obsm  anomaly_list = [anomaly1, anomaly2] <p>In the anomaly subtype module of STANDS, since the generator of the anomaly detection module is used as extractor, it is also necessary to convert the anomaly data.</p> In\u00a0[14]: Copied! <pre># convert detected anomaliesw\nanomaly_g = stands.read_multi(anomaly_list, patch_size=64, n_genes=3000, preprocess=False)\n</pre> # convert detected anomaliesw anomaly_g = stands.read_multi(anomaly_list, patch_size=64, n_genes=3000, preprocess=False) In\u00a0[15]: Copied! <pre>ASModel = stands.Subtype(ADModel.G)\nsubtype = ASModel.fit(anomaly_g)\n</pre> ASModel = stands.Subtype(ADModel.G) subtype = ASModel.fit(anomaly_g) <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3000/3000 [02:26&lt;00:00, 20.47it/s, Loss=0.0682]\n</pre> In\u00a0[16]: Copied! <pre># store the result\nanomaly1.obs['subtype'] = subtype[0]\nnormal1 = tgt1[tgt1.obs['pred']==0]\nnormal1.obs['subtype'] = 0\ntgt1.obs = pd.concat([anomaly1.obs, normal1.obs]).sort_index()\ntgt1.obs['subtype'] = tgt1.obs['subtype'].astype('int')\n\nanomaly2.obs['subtype'] = subtype[1]\nnormal2 = tgt2[tgt2.obs['pred']==0]\nnormal2.obs['subtype'] = 0\ntgt2.obs = pd.concat([anomaly2.obs, normal2.obs]).sort_index()\ntgt2.obs['subtype'] = tgt2.obs['subtype'].astype('int')\n</pre> # store the result anomaly1.obs['subtype'] = subtype[0] normal1 = tgt1[tgt1.obs['pred']==0] normal1.obs['subtype'] = 0 tgt1.obs = pd.concat([anomaly1.obs, normal1.obs]).sort_index() tgt1.obs['subtype'] = tgt1.obs['subtype'].astype('int')  anomaly2.obs['subtype'] = subtype[1] normal2 = tgt2[tgt2.obs['pred']==0] normal2.obs['subtype'] = 0 tgt2.obs = pd.concat([anomaly2.obs, normal2.obs]).sort_index() tgt2.obs['subtype'] = tgt2.obs['subtype'].astype('int') <p>STANDS integrates several evaluation metrics in <code>stands.evaluate</code> for anomaly detection tasks, which can be used very easily and directly.</p> In\u00a0[17]: Copied! <pre># annotate ground truth labels\ndf = pd.DataFrame(tgt1.obs)\ndf['sub_label'] = np.nan\n\n# disease == 1\ndisease_1_df = df[df['disease'] == 1].copy()\nunique_cell_types = disease_1_df['cell_type'].unique()\nsubtype_mapping = {cell_type: i+1 for i, cell_type in enumerate(unique_cell_types)}\ndisease_1_df['sub_label'] = disease_1_df['cell_type'].map(subtype_mapping)\n\n# disease == 0\ndisease_0_df = df[df['disease'] == 0].copy()\ndisease_0_df['sub_label'] = 0\n\ndf = pd.concat([disease_1_df, disease_0_df]).sort_index()\ndf['sub_label'] = df['sub_label'].astype('category')\ndf['subtype'] = df['subtype'].astype('category')\n\ntgt1.obs = df\n</pre> # annotate ground truth labels df = pd.DataFrame(tgt1.obs) df['sub_label'] = np.nan  # disease == 1 disease_1_df = df[df['disease'] == 1].copy() unique_cell_types = disease_1_df['cell_type'].unique() subtype_mapping = {cell_type: i+1 for i, cell_type in enumerate(unique_cell_types)} disease_1_df['sub_label'] = disease_1_df['cell_type'].map(subtype_mapping)  # disease == 0 disease_0_df = df[df['disease'] == 0].copy() disease_0_df['sub_label'] = 0  df = pd.concat([disease_1_df, disease_0_df]).sort_index() df['sub_label'] = df['sub_label'].astype('category') df['subtype'] = df['subtype'].astype('category')  tgt1.obs = df In\u00a0[18]: Copied! <pre>metrics = ['F1*NMI', 'SGD_degree', 'SGD_cc']\nresult = stands.evaluate(metrics, adata=tgt1, y_true=tgt1.obs['disease'], y_pred=tgt1.obs['pred'],\n                         spaid='spatial', typeid='cell_type', clustid='subtype')\n</pre> metrics = ['F1*NMI', 'SGD_degree', 'SGD_cc'] result = stands.evaluate(metrics, adata=tgt1, y_true=tgt1.obs['disease'], y_pred=tgt1.obs['pred'],                          spaid='spatial', typeid='cell_type', clustid='subtype') In\u00a0[19]: Copied! <pre>pd.DataFrame(zip(metrics, result))\n</pre> pd.DataFrame(zip(metrics, result)) Out[19]: 0 1 0 F1*NMI 0.350608 1 SGD_degree 0.938348 2 SGD_cc 0.527574 In\u00a0[20]: Copied! <pre># annotate ground truth labels\ndf = pd.DataFrame(tgt2.obs)\ndf['sub_label'] = np.nan\n\n# disease == 1\ndisease_1_df = df[df['disease'] == 1].copy()\nunique_cell_types = disease_1_df['cell_type'].unique()\nsubtype_mapping = {cell_type: i+1 for i, cell_type in enumerate(unique_cell_types)}\ndisease_1_df['sub_label'] = disease_1_df['cell_type'].map(subtype_mapping)\n\n# disease == 0\ndisease_0_df = df[df['disease'] == 0].copy()\ndisease_0_df['sub_label'] = 0\n\ndf = pd.concat([disease_1_df, disease_0_df]).sort_index()\ndf['sub_label'] = df['sub_label'].astype('category')\ndf['subtype'] = df['subtype'].astype('category')\n\ntgt2.obs = df\n</pre> # annotate ground truth labels df = pd.DataFrame(tgt2.obs) df['sub_label'] = np.nan  # disease == 1 disease_1_df = df[df['disease'] == 1].copy() unique_cell_types = disease_1_df['cell_type'].unique() subtype_mapping = {cell_type: i+1 for i, cell_type in enumerate(unique_cell_types)} disease_1_df['sub_label'] = disease_1_df['cell_type'].map(subtype_mapping)  # disease == 0 disease_0_df = df[df['disease'] == 0].copy() disease_0_df['sub_label'] = 0  df = pd.concat([disease_1_df, disease_0_df]).sort_index() df['sub_label'] = df['sub_label'].astype('category') df['subtype'] = df['subtype'].astype('category')  tgt2.obs = df In\u00a0[21]: Copied! <pre>metrics = ['F1*NMI', 'SGD_degree', 'SGD_cc']\nresult = stands.evaluate(metrics, adata=tgt2, y_true=tgt2.obs['disease'], y_pred=tgt2.obs['pred'],\n                         spaid='spatial', typeid='cell_type', clustid='subtype')\n</pre> metrics = ['F1*NMI', 'SGD_degree', 'SGD_cc'] result = stands.evaluate(metrics, adata=tgt2, y_true=tgt2.obs['disease'], y_pred=tgt2.obs['pred'],                          spaid='spatial', typeid='cell_type', clustid='subtype') In\u00a0[22]: Copied! <pre>pd.DataFrame(zip(metrics, result))\n</pre> pd.DataFrame(zip(metrics, result)) Out[22]: 0 1 0 F1*NMI 0.375369 1 SGD_degree 0.939437 2 SGD_cc 0.431424 <p>We use the spatial map to visualise the results of anomaly detection.</p> In\u00a0[23]: Copied! <pre>ax = sc.pl.spatial(tgt1, color=['subtype', 'sub_label'], s=90, show=False, crop_coord=(0, 8700, 800, 7600))\n\nax[0].legend(fontsize=12)\nax[0].set_title('STANDS', fontsize=18)\nax[0].set_xlabel('Saptial 1', fontsize=14)\nax[0].set_ylabel('Saptial 2', fontsize=14)\n\nax[1].legend(fontsize=12)\nax[1].set_title('Ground Truth', fontsize=18)\nax[1].set_xlabel('Saptial 1', fontsize=14)\nax[1].set_ylabel('Saptial 2', fontsize=14)\n\nplt.show()\n</pre> ax = sc.pl.spatial(tgt1, color=['subtype', 'sub_label'], s=90, show=False, crop_coord=(0, 8700, 800, 7600))  ax[0].legend(fontsize=12) ax[0].set_title('STANDS', fontsize=18) ax[0].set_xlabel('Saptial 1', fontsize=14) ax[0].set_ylabel('Saptial 2', fontsize=14)  ax[1].legend(fontsize=12) ax[1].set_title('Ground Truth', fontsize=18) ax[1].set_xlabel('Saptial 1', fontsize=14) ax[1].set_ylabel('Saptial 2', fontsize=14)  plt.show() In\u00a0[24]: Copied! <pre>ax = sc.pl.spatial(tgt2, color=['subtype', 'sub_label'], s=90, show=False, crop_coord=(100, 9200, 2000, 9800))\n\nax[0].legend(fontsize=12)\nax[0].set_title('STANDS', fontsize=18)\nax[0].set_xlabel('Saptial 1', fontsize=14)\nax[0].set_ylabel('Saptial 2', fontsize=14)\n\nax[1].legend(fontsize=12)\nax[1].set_title('Ground Truth', fontsize=18)\nax[1].set_xlabel('Saptial 1', fontsize=14)\nax[1].set_ylabel('Saptial 2', fontsize=14)\n\nplt.show()\n</pre> ax = sc.pl.spatial(tgt2, color=['subtype', 'sub_label'], s=90, show=False, crop_coord=(100, 9200, 2000, 9800))  ax[0].legend(fontsize=12) ax[0].set_title('STANDS', fontsize=18) ax[0].set_xlabel('Saptial 1', fontsize=14) ax[0].set_ylabel('Saptial 2', fontsize=14)  ax[1].legend(fontsize=12) ax[1].set_title('Ground Truth', fontsize=18) ax[1].set_xlabel('Saptial 1', fontsize=14) ax[1].set_ylabel('Saptial 2', fontsize=14)  plt.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"tutorial/MultiAS/#tutorial-6-discern-biologically-distinct-anomalous-tissue-subdomains-across-multiple-st-datasets","title":"Tutorial 6: Discern biologically distinct anomalous tissue subdomains across multiple ST datasets\u00b6","text":""},{"location":"tutorial/MultiAS/#loading-package","title":"Loading package\u00b6","text":""},{"location":"tutorial/MultiAS/#reading-st-data","title":"Reading ST data\u00b6","text":""},{"location":"tutorial/MultiAS/#converting-data","title":"Converting data\u00b6","text":""},{"location":"tutorial/MultiAS/#detecting-anomaly-domains","title":"Detecting anomaly domains\u00b6","text":""},{"location":"tutorial/MultiAS/#aligning-multiple-datasets","title":"Aligning multiple datasets\u00b6","text":""},{"location":"tutorial/MultiAS/#training-the-model","title":"Training the model\u00b6","text":""},{"location":"tutorial/MultiAS/#evaluation","title":"Evaluation\u00b6","text":""},{"location":"tutorial/MultiAS/#visualization","title":"Visualization\u00b6","text":""},{"location":"tutorial/Pretrain/","title":"Tutorial 0: Pretrain STANDS basic extractor","text":"<p>STANDS employ the pretrained image extractor (ResNet backbones) and modality fusion block (Transformer bacbones). For a more accurate performance in subsequent tasks, we encourage you to pretrain STANDS on large-scale public spatial transcriptomics datasets. This tutorial will guide you to pretrain STANDS and save the pretrained weights automatically.</p> In\u00a0[1]: Copied! <pre>import warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> import warnings warnings.filterwarnings(\"ignore\") In\u00a0[2]: Copied! <pre>import stands\nimport numpy as np\nimport scanpy as sc\n</pre> import stands import numpy as np import scanpy as sc <p>We strongly recommend using multiple ST datasets that contain both images and spatial gene expressions to pretrain STANDS. Here, the demo dataset we provide consists of three slices taken from different donors, with spatial coordinates stored in <code>adata.obsm['spatial']</code> and images in <code>adata.uns['spatial']</code>.</p> In\u00a0[3]: Copied! <pre>adata_list = []\npath = './HumanBreast/process/'\ndata_name = ['V05', 'V06', 'V07']\nfor d in data_name:\n    read_path = path + d + '.h5ad'\n    a = sc.read_h5ad(read_path)\n    adata_list.append(a)\n</pre> adata_list = [] path = './HumanBreast/process/' data_name = ['V05', 'V06', 'V07'] for d in data_name:     read_path = path + d + '.h5ad'     a = sc.read_h5ad(read_path)     adata_list.append(a) <p>By directly inputting the data list into <code>STANDS.pretrain</code>, specifying the patch size and the GPU for pretraining, you can automatically conduct pretraining and save the weights. In this case, the pretraining task is set as unsupervised reconstruction, so there is no need for cell type annotations.</p> In\u00a0[4]: Copied! <pre>stands.pretrain(adata_list, patch_size=64, GPU='cuda:0')\n</pre> stands.pretrain(adata_list, patch_size=64, GPU='cuda:0') <pre>Begin to pretrain STANDS...\n</pre> <pre>Pretrain STANDS: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100/100 [37:29&lt;00:00, 22.49s/it, Loss=0.14]\n</pre> <pre>The pretrained weights for STANDS have been automatically saved at /stands/model/backbone/model.pth!\n</pre>"},{"location":"tutorial/Pretrain/#tutorial-0-pretrain-stands-basic-extractor","title":"Tutorial 0: Pretrain STANDS basic extractor\u00b6","text":""},{"location":"tutorial/Pretrain/#loading-package","title":"Loading package\u00b6","text":""},{"location":"tutorial/Pretrain/#reading-st-data","title":"Reading ST data\u00b6","text":""},{"location":"tutorial/Pretrain/#pretraining-the-model","title":"Pretraining the model\u00b6","text":""},{"location":"tutorial/ShareBC/","title":"Tutorial 3: Align multiple ST datasets sharing identical domain types","text":"<p>We use STANDS to align multiple ST datasets sharing identical domain types. Specifically, this experiment involves three non-adjacent 10x Visium healthy human breast tissue datasets (10x-hNB-v05, 10x-hNB-v06, 10x-hNB-v07), which are prepared from different donors and encompass four normal domain types. In fact, the same process can be used to correct for batch effects for adjacent vertical slices.</p> In\u00a0[1]: Copied! <pre>import warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> import warnings warnings.filterwarnings(\"ignore\") In\u00a0[2]: Copied! <pre>import torch\nimport stands\nimport pandas as pd\nimport scanpy as sc\nimport anndata as ad\nimport matplotlib.pyplot as plt\n</pre> import torch import stands import pandas as pd import scanpy as sc import anndata as ad import matplotlib.pyplot as plt <p>We read the processed ST datasets. In the example, the demo datasets includes: 1) gene expression matrix in <code>adata.X</code>; 2) spatial coordinates in <code>adata.obsm['spatial']</code>; 3) histology image in <code>adata.uns['spatial']</code>. To make the model can read the data sucessfully, please ensure the same anndata structure as example.</p> In\u00a0[3]: Copied! <pre>path = [\n    './HumanBreast/process/V07.h5ad',\n    './HumanBreast/process/V06.h5ad',\n    './HumanBreast/process/V05.h5ad'\n]\n\nadata_list = []\nfor p in path:\n    adata = sc.read_h5ad(p)\n    adata_list.append(adata)\n</pre> path = [     './HumanBreast/process/V07.h5ad',     './HumanBreast/process/V06.h5ad',     './HumanBreast/process/V05.h5ad' ]  adata_list = [] for p in path:     adata = sc.read_h5ad(p)     adata_list.append(adata) In\u00a0[4]: Copied! <pre>adata_list\n</pre> adata_list Out[4]: <pre>[AnnData object with n_obs \u00d7 n_vars = 2086 \u00d7 3000\n     obs: 'cell_type', 'batch', 'disease'\n     uns: 'spatial'\n     obsm: 'spatial',\n AnnData object with n_obs \u00d7 n_vars = 3037 \u00d7 3000\n     obs: 'cell_type', 'batch', 'disease'\n     uns: 'spatial'\n     obsm: 'spatial',\n AnnData object with n_obs \u00d7 n_vars = 2224 \u00d7 3000\n     obs: 'cell_type', 'batch', 'disease'\n     uns: 'spatial'\n     obsm: 'spatial']</pre> <p>For ST input, STANDS first needs to convert the anndata data into a graph, where nodes represent each spot and edges represent the adjacency relationship between two spots. In the example, the node features of the converted graph include the gene expression vector and image patch. Additionally, if the data has been preprocessed, you should set <code>preprocess=False</code>. It is worth noting that STANDS converts data in the case of multiple datasets in a slightly different way than a single dataset.</p> In\u00a0[5]: Copied! <pre>adata_g = stands.read_multi(adata_list, patch_size=64, n_genes=3000, preprocess=False)\n</pre> adata_g = stands.read_multi(adata_list, patch_size=64, n_genes=3000, preprocess=False) <p>The batch correction model of STANDS is initialized based on the weights of the anomaly detection model. This is partly to speed up the training process and partly to make the model more uniform in both phases. Here, <code>generator.pth</code> is the saved model weight from the anomaly detection phase.</p> In\u00a0[6]: Copied! <pre>generator = stands.model.GeneratorAD(gene_dim=3000, patch_size=64)\ngenerator.load_weight('generator.pth')\n</pre> generator = stands.model.GeneratorAD(gene_dim=3000, patch_size=64) generator.load_weight('generator.pth') <p>After inputting the converted data and generator into <code>fit</code>, STANDS starts to train the style-transfer GAN. After training, the corrected data will directly replace <code>adata.X</code>, and <code>fit</code> will automatically return <code>adata</code> as output.</p> In\u00a0[7]: Copied! <pre>model = stands.BatchAlign(GPU='cuda:1')\nadata = model.fit(adata_g, generator)\n</pre> model = stands.BatchAlign(GPU='cuda:1') adata = model.fit(adata_g, generator) <pre>Begin to find Kin Pairs between datasets...\n</pre> <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [01:40&lt;00:00, 10.00it/s, D_Loss=-.171, G_Loss=6.84]\n</pre> <pre>Kin Pairs have been found.\n\nBegin to correct spatial transcriptomics datasets...\n</pre> <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [00:46&lt;00:00,  4.66s/it, D_Loss=0.28, G_Loss=1.69]\n</pre> <pre>Datasets have been corrected.\n\n</pre> <p>STANDS integrates several evaluation metrics in <code>stands.evaluate</code> for anomaly detection tasks, which can be used very easily and directly.</p> In\u00a0[8]: Copied! <pre>sc.pp.normalize_total(adata)\nsc.pp.log1p(adata)\nsc.pp.pca(adata)\nsc.pp.neighbors(adata)\nsc.tl.umap(adata)\n</pre> sc.pp.normalize_total(adata) sc.pp.log1p(adata) sc.pp.pca(adata) sc.pp.neighbors(adata) sc.tl.umap(adata) <pre>2024-06-03 17:02:44.224646: I tensorflow/core/util/util.cc:169] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.\n</pre> In\u00a0[9]: Copied! <pre>metrics = ['ASW_type', '1-ASW_batch', 'BatchKL', 'iLISI', 'cLISI']\nresult = stands.evaluate(metrics, adata=adata, spaid='spatial', \n                         batchid='batch', typeid='cell_type', emb='X_umap')\n</pre> metrics = ['ASW_type', '1-ASW_batch', 'BatchKL', 'iLISI', 'cLISI'] result = stands.evaluate(metrics, adata=adata, spaid='spatial',                           batchid='batch', typeid='cell_type', emb='X_umap') In\u00a0[10]: Copied! <pre>pd.DataFrame(zip(metrics, result))\n</pre> pd.DataFrame(zip(metrics, result)) Out[10]: 0 1 0 ASW_type 0.603425 1 1-ASW_batch 0.918596 2 BatchKL 0.279653 3 iLISI 2.448359 4 cLISI 1.005846 <p>We use the umap to visualise the results of batch alignment.</p> In\u00a0[11]: Copied! <pre>original = ad.concat(adata_list)\nsc.pp.normalize_total(original)\nsc.pp.log1p(original)\nsc.pp.pca(original)\nsc.pp.neighbors(original)\nsc.tl.umap(original)\n</pre> original = ad.concat(adata_list) sc.pp.normalize_total(original) sc.pp.log1p(original) sc.pp.pca(original) sc.pp.neighbors(original) sc.tl.umap(original) In\u00a0[12]: Copied! <pre>original.obs['batch'] = original.obs['batch'].astype('category')\nax = sc.pl.umap(original, color=['batch', 'cell_type'], show=False)\n\nax[0].legend(fontsize=12)\nax[0].set_title('Original', fontsize=18)\nax[0].set_xlabel('UMAP 1', fontsize=14)\nax[0].set_ylabel('UMAP 2', fontsize=14)\n\nax[1].legend(fontsize=12)\nax[1].set_title('Original', fontsize=18)\nax[1].set_xlabel('UMAP 1', fontsize=14)\nax[1].set_ylabel('UMAP 2', fontsize=14)\n\nplt.show()\n</pre> original.obs['batch'] = original.obs['batch'].astype('category') ax = sc.pl.umap(original, color=['batch', 'cell_type'], show=False)  ax[0].legend(fontsize=12) ax[0].set_title('Original', fontsize=18) ax[0].set_xlabel('UMAP 1', fontsize=14) ax[0].set_ylabel('UMAP 2', fontsize=14)  ax[1].legend(fontsize=12) ax[1].set_title('Original', fontsize=18) ax[1].set_xlabel('UMAP 1', fontsize=14) ax[1].set_ylabel('UMAP 2', fontsize=14)  plt.show() In\u00a0[13]: Copied! <pre>adata.obs['batch'] = adata.obs['batch'].astype('category')\nax = sc.pl.umap(adata, color=['batch', 'cell_type'], show=False)\n\nax[0].legend(fontsize=12)\nax[0].set_title('STANDS', fontsize=18)\nax[0].set_xlabel('UMAP 1', fontsize=14)\nax[0].set_ylabel('UMAP 2', fontsize=14)\n\nax[1].legend(fontsize=12)\nax[1].set_title('STANDS', fontsize=18)\nax[1].set_xlabel('UMAP 1', fontsize=14)\nax[1].set_ylabel('UMAP 2', fontsize=14)\n\nplt.show()\n</pre> adata.obs['batch'] = adata.obs['batch'].astype('category') ax = sc.pl.umap(adata, color=['batch', 'cell_type'], show=False)  ax[0].legend(fontsize=12) ax[0].set_title('STANDS', fontsize=18) ax[0].set_xlabel('UMAP 1', fontsize=14) ax[0].set_ylabel('UMAP 2', fontsize=14)  ax[1].legend(fontsize=12) ax[1].set_title('STANDS', fontsize=18) ax[1].set_xlabel('UMAP 1', fontsize=14) ax[1].set_ylabel('UMAP 2', fontsize=14)  plt.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"tutorial/ShareBC/#tutorial-3-align-multiple-st-datasets-sharing-identical-domain-types","title":"Tutorial 3: Align multiple ST datasets sharing identical domain types\u00b6","text":""},{"location":"tutorial/ShareBC/#loading-package","title":"Loading package\u00b6","text":""},{"location":"tutorial/ShareBC/#reading-st-data","title":"Reading ST data\u00b6","text":""},{"location":"tutorial/ShareBC/#converting-data","title":"Converting data\u00b6","text":""},{"location":"tutorial/ShareBC/#loading-the-weight","title":"Loading the weight\u00b6","text":""},{"location":"tutorial/ShareBC/#training-the-model","title":"Training the model\u00b6","text":""},{"location":"tutorial/ShareBC/#evaluation","title":"Evaluation\u00b6","text":""},{"location":"tutorial/ShareBC/#visualization","title":"Visualization\u00b6","text":""},{"location":"tutorial/SingleAD/","title":"Tutorial 1: Identify cancerous domains in single ST dataset","text":"<p>We use STANDS to identify carcinogenic domains in single ST dataset. Specifically, this experiment involves a 10x Visium reference dataset (10x-hNB-v05), which is prepared from healthy human breast tissues and encompasses four normal domain types, and a 10x Visium target dataset (10x-hBC-G2), which is prepared from human breast cancer tissues and encompasses two additional carcinogenic domain types including the cancer in situ (CIS) and the invasive cancer (IC) domains.</p> In\u00a0[1]: Copied! <pre>import warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> import warnings warnings.filterwarnings(\"ignore\") In\u00a0[2]: Copied! <pre>import torch\nimport stands\nimport pandas as pd\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n</pre> import torch import stands import pandas as pd import scanpy as sc import matplotlib.pyplot as plt <p>We read the processed ST datasets. In the example, the demo datasets includes: 1) gene expression matrix in <code>adata.X</code>; 2) spatial coordinates in <code>adata.obsm['spatial']</code>; 3) histology image in <code>adata.uns['spatial']</code>. To make the model can read the data sucessfully, please ensure the same anndata structure as example.</p> In\u00a0[3]: Copied! <pre>ref = sc.read_h5ad('./HumanBreast/process/V05.h5ad')\ntgt = sc.read_h5ad('./HumanBreast/process/G2.h5ad')\n</pre> ref = sc.read_h5ad('./HumanBreast/process/V05.h5ad') tgt = sc.read_h5ad('./HumanBreast/process/G2.h5ad') In\u00a0[4]: Copied! <pre>ref\n</pre> ref Out[4]: <pre>AnnData object with n_obs \u00d7 n_vars = 2224 \u00d7 3000\n    obs: 'cell_type', 'batch', 'disease'\n    uns: 'spatial'\n    obsm: 'spatial'</pre> In\u00a0[5]: Copied! <pre>tgt\n</pre> tgt Out[5]: <pre>AnnData object with n_obs \u00d7 n_vars = 467 \u00d7 3000\n    obs: 'cell_type', 'batch', 'disease'\n    uns: 'spatial'\n    obsm: 'spatial'</pre> <p>For ST input, STANDS first needs to convert the anndata data into a graph, where nodes represent each spot and edges represent the adjacency relationship between two spots. In the example, the node features of the converted graph include the gene expression vector and image patch. Additionally, if the data has been preprocessed, you should set <code>preprocess=False</code>.</p> In\u00a0[6]: Copied! <pre>ref_g = stands.read(ref, patch_size=64, n_genes=3000, preprocess=False)\ntgt_g = stands.read(tgt, patch_size=64, n_genes=3000, preprocess=False)\n</pre> ref_g = stands.read(ref, patch_size=64, n_genes=3000, preprocess=False) tgt_g = stands.read(tgt, patch_size=64, n_genes=3000, preprocess=False) <p>After inputting the converted reference data into <code>fit</code>, STANDS starts to train the multimodal GAN. After training and inputting the converted target data into <code>predict</code>, STANDS conveniently detects the anomalies and outputs anomaly scores for each spot, where a higher score indicates a more likely anomaly. In addition, if <code>run_gmm=True</code> is specified in <code>predict</code>, STANDS will also use the GMM algorithm to determine the thresholds for anomalous and normal, and return the binary classification results.</p> In\u00a0[7]: Copied! <pre>model = stands.AnomalyDetect()\nmodel.fit(ref_g)\n</pre> model = stands.AnomalyDetect() model.fit(ref_g) <pre>Begin to train the model on reference datasets...\n</pre> <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [02:48&lt;00:00, 16.80s/it, D_Loss=0.114, G_Loss=2.18]</pre> <pre>Training has been finished.\n</pre> <pre>\n</pre> In\u00a0[8]: Copied! <pre>score, label = model.predict(tgt_g)\n</pre> score, label = model.predict(tgt_g) <pre>Detect anomalous spots on target dataset...\nAnomalous spots have been detected.\n\n</pre> In\u00a0[9]: Copied! <pre># store the results\ntgt.obs['score'] = score\ntgt.obs['pred'] = label\n</pre> # store the results tgt.obs['score'] = score tgt.obs['pred'] = label <p>The model trained in the anomaly detection phase will be used as the extractor for the subsequent tasks. Thus saving the weights will help to improve the performance of the subsequent tasks.</p> In\u00a0[10]: Copied! <pre>torch.save(model.G.state_dict(), 'generator.pth')\n</pre> torch.save(model.G.state_dict(), 'generator.pth') <p>STANDS integrates several evaluation metrics in <code>stands.evaluate</code> for anomaly detection tasks, which can be used very easily and directly.</p> In\u00a0[11]: Copied! <pre>metrics = ['Accuracy', 'F1', 'SGD_degree', 'SGD_cc']\nresult = stands.evaluate(metrics, adata=tgt, spaid='spatial', y_true=tgt.obs['disease'], \n                         y_pred=tgt.obs['pred'], y_score=tgt.obs['score'])\n</pre> metrics = ['Accuracy', 'F1', 'SGD_degree', 'SGD_cc'] result = stands.evaluate(metrics, adata=tgt, spaid='spatial', y_true=tgt.obs['disease'],                           y_pred=tgt.obs['pred'], y_score=tgt.obs['score']) In\u00a0[12]: Copied! <pre>pd.DataFrame(zip(metrics, result))\n</pre> pd.DataFrame(zip(metrics, result)) Out[12]: 0 1 0 Accuracy 0.845824 1 F1 0.775000 2 SGD_degree 0.568125 3 SGD_cc 0.328555 <p>We use the spatial map to visualise the results of anomaly detection.</p> In\u00a0[13]: Copied! <pre>tgt.obs['pred'] = tgt.obs['pred'].astype('category')\ntgt.obs['disease'] = tgt.obs['disease'].astype('category')\n\nax = sc.pl.spatial(tgt, color=['pred', 'disease'], s=90, show=False, crop_coord=(0, 8700, 800, 7600))\n\nax[0].legend(['Normal', 'Anomaly'], fontsize=12)\nax[0].set_title('STANDS', fontsize=18)\nax[0].set_xlabel('Saptial 1', fontsize=14)\nax[0].set_ylabel('Saptial 2', fontsize=14)\n\nax[1].legend(['Normal', 'Anomaly'], fontsize=12)\nax[1].set_title('Ground Truth', fontsize=18)\nax[1].set_xlabel('Saptial 1', fontsize=14)\nax[1].set_ylabel('Saptial 2', fontsize=14)\n\nplt.show()\n</pre> tgt.obs['pred'] = tgt.obs['pred'].astype('category') tgt.obs['disease'] = tgt.obs['disease'].astype('category')  ax = sc.pl.spatial(tgt, color=['pred', 'disease'], s=90, show=False, crop_coord=(0, 8700, 800, 7600))  ax[0].legend(['Normal', 'Anomaly'], fontsize=12) ax[0].set_title('STANDS', fontsize=18) ax[0].set_xlabel('Saptial 1', fontsize=14) ax[0].set_ylabel('Saptial 2', fontsize=14)  ax[1].legend(['Normal', 'Anomaly'], fontsize=12) ax[1].set_title('Ground Truth', fontsize=18) ax[1].set_xlabel('Saptial 1', fontsize=14) ax[1].set_ylabel('Saptial 2', fontsize=14)  plt.show() In\u00a0[14]: Copied! <pre>ax = sc.pl.spatial(tgt, color=['score'], s=90, show=False, crop_coord=(0, 8700, 800, 7600))\nax[0].set_title('Anomaly Score', fontsize=18)\nax[0].set_xlabel('Saptial 1', fontsize=14)\nax[0].set_ylabel('Saptial 2', fontsize=14)\nplt.show()\n</pre> ax = sc.pl.spatial(tgt, color=['score'], s=90, show=False, crop_coord=(0, 8700, 800, 7600)) ax[0].set_title('Anomaly Score', fontsize=18) ax[0].set_xlabel('Saptial 1', fontsize=14) ax[0].set_ylabel('Saptial 2', fontsize=14) plt.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"tutorial/SingleAD/#tutorial-1-identify-cancerous-domains-in-single-st-dataset","title":"Tutorial 1: Identify cancerous domains in single ST dataset\u00b6","text":""},{"location":"tutorial/SingleAD/#loading-package","title":"Loading package\u00b6","text":""},{"location":"tutorial/SingleAD/#reading-st-data","title":"Reading ST data\u00b6","text":""},{"location":"tutorial/SingleAD/#converting-data","title":"Converting data\u00b6","text":""},{"location":"tutorial/SingleAD/#training-the-model","title":"Training the model\u00b6","text":""},{"location":"tutorial/SingleAD/#saving-the-weight","title":"Saving the weight\u00b6","text":""},{"location":"tutorial/SingleAD/#evaluation","title":"Evaluation\u00b6","text":""},{"location":"tutorial/SingleAD/#visualization","title":"Visualization\u00b6","text":""},{"location":"tutorial/SingleAS/","title":"Tutorial 5: Discern biologically distinct anomalous tissue subdomains in single ST datasets","text":"<p>We use STANDS to discern biologically distinct anomalous tissue subdomains in single ST datasets. Specifically, this experiment involves a normal breast tissue dataset (10x-hNB-v05) and a breast cancer datasets (10x-hBC-G2). The cancer in situ and invasive cancer in 10x-hBC-G2 are regarded as the anomaly subdomains.</p> In\u00a0[1]: Copied! <pre>import warnings\nwarnings.filterwarnings(\"ignore\")\n</pre> import warnings warnings.filterwarnings(\"ignore\") In\u00a0[2]: Copied! <pre>import torch\nimport stands\nimport numpy as np\nimport pandas as pd\nimport scanpy as sc\nimport matplotlib.pyplot as plt\n</pre> import torch import stands import numpy as np import pandas as pd import scanpy as sc import matplotlib.pyplot as plt <p>We read the processed ST datasets. In the example, the demo datasets includes: 1) gene expression matrix in <code>adata.X</code>; 2) spatial coordinates in <code>adata.obsm['spatial']</code>; 3) histology image in <code>adata.uns['spatial']</code>. To make the model can read the data sucessfully, please ensure the same anndata structure as example.</p> In\u00a0[3]: Copied! <pre>ref = sc.read_h5ad('./HumanBreast/process/V05.h5ad')\ntgt = sc.read_h5ad('./HumanBreast/process/G2.h5ad')\n</pre> ref = sc.read_h5ad('./HumanBreast/process/V05.h5ad') tgt = sc.read_h5ad('./HumanBreast/process/G2.h5ad') In\u00a0[4]: Copied! <pre>ref\n</pre> ref Out[4]: <pre>AnnData object with n_obs \u00d7 n_vars = 2224 \u00d7 3000\n    obs: 'cell_type', 'batch', 'disease'\n    uns: 'spatial'\n    obsm: 'spatial'</pre> In\u00a0[5]: Copied! <pre>tgt\n</pre> tgt Out[5]: <pre>AnnData object with n_obs \u00d7 n_vars = 467 \u00d7 3000\n    obs: 'cell_type', 'batch', 'disease'\n    uns: 'spatial'\n    obsm: 'spatial'</pre> <p>For ST input, STANDS first needs to convert the anndata data into a graph, where nodes represent each spot and edges represent the adjacency relationship between two spots. In the example, the node features of the converted graph include the gene expression vector and image patch. Additionally, if the data has been preprocessed, you should set <code>preprocess=False</code>.</p> In\u00a0[6]: Copied! <pre>ref_g = stands.read(ref, patch_size=64, n_genes=3000, preprocess=False)\ntgt_g = stands.read(tgt, patch_size=64, n_genes=3000, preprocess=False)\n</pre> ref_g = stands.read(ref, patch_size=64, n_genes=3000, preprocess=False) tgt_g = stands.read(tgt, patch_size=64, n_genes=3000, preprocess=False) <p>The anomaly subtype module of STANDS is implemented based on the anomaly detection module. Firstly, the anomalous regions on the target dataset need to be detected using STANDS.</p> In\u00a0[7]: Copied! <pre>ADModel = stands.AnomalyDetect()\nADModel.fit(ref_g)\n</pre> ADModel = stands.AnomalyDetect() ADModel.fit(ref_g) <pre>Begin to train the model on reference datasets...\n</pre> <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 10/10 [02:47&lt;00:00, 16.79s/it, D_Loss=0.0395, G_Loss=2.14]</pre> <pre>Training has been finished.\n</pre> <pre>\n</pre> In\u00a0[8]: Copied! <pre>score, label = ADModel.predict(tgt_g)\n</pre> score, label = ADModel.predict(tgt_g) <pre>Detect anomalous spots on target dataset...\nAnomalous spots have been detected.\n\n</pre> In\u00a0[9]: Copied! <pre># store the results\ntgt.obs['score'] = score\ntgt.obs['pred'] = label\n</pre> # store the results tgt.obs['score'] = score tgt.obs['pred'] = label In\u00a0[10]: Copied! <pre>anomaly = tgt[tgt.obs['pred']==1]\n</pre> anomaly = tgt[tgt.obs['pred']==1] <p>In the anomaly subtype module of STANDS, since the generator of the anomaly detection module is used as extractor, it is also necessary to convert the anomaly data.</p> In\u00a0[11]: Copied! <pre># convert detected anomaliesw\nanomaly_g = stands.read(anomaly, patch_size=64, n_genes=3000, preprocess=False)\n</pre> # convert detected anomaliesw anomaly_g = stands.read(anomaly, patch_size=64, n_genes=3000, preprocess=False) In\u00a0[12]: Copied! <pre>ASModel = stands.Subtype(ADModel.G)\nsubtype = ASModel.fit(anomaly_g)\n</pre> ASModel = stands.Subtype(ADModel.G) subtype = ASModel.fit(anomaly_g) <pre>Train Epochs: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 3000/3000 [02:24&lt;00:00, 20.72it/s, Loss=0.00127] \n</pre> In\u00a0[13]: Copied! <pre># store the result\nanomaly.obs['subtype'] = subtype\nnormal = tgt[tgt.obs['pred']==0]\nnormal.obs['subtype'] = 0\ntgt.obs = pd.concat([anomaly.obs, normal.obs]).sort_index()\ntgt.obs['subtype'] = tgt.obs['subtype'].astype('int')\n</pre> # store the result anomaly.obs['subtype'] = subtype normal = tgt[tgt.obs['pred']==0] normal.obs['subtype'] = 0 tgt.obs = pd.concat([anomaly.obs, normal.obs]).sort_index() tgt.obs['subtype'] = tgt.obs['subtype'].astype('int') <p>STANDS integrates several evaluation metrics in <code>stands.evaluate</code> for anomaly detection tasks, which can be used very easily and directly.</p> In\u00a0[14]: Copied! <pre># annotate ground truth labels\ndf = pd.DataFrame(tgt.obs)\ndf['sub_label'] = np.nan\n\n# disease == 1\ndisease_1_df = df[df['disease'] == 1].copy()\nunique_cell_types = disease_1_df['cell_type'].unique()\nsubtype_mapping = {cell_type: i+1 for i, cell_type in enumerate(unique_cell_types)}\ndisease_1_df['sub_label'] = disease_1_df['cell_type'].map(subtype_mapping)\n\n# disease == 0\ndisease_0_df = df[df['disease'] == 0].copy()\ndisease_0_df['sub_label'] = 0\n\ndf = pd.concat([disease_1_df, disease_0_df]).sort_index()\ndf['sub_label'] = df['sub_label'].astype('category')\ndf['subtype'] = df['subtype'].astype('category')\n\ntgt.obs = df\n</pre> # annotate ground truth labels df = pd.DataFrame(tgt.obs) df['sub_label'] = np.nan  # disease == 1 disease_1_df = df[df['disease'] == 1].copy() unique_cell_types = disease_1_df['cell_type'].unique() subtype_mapping = {cell_type: i+1 for i, cell_type in enumerate(unique_cell_types)} disease_1_df['sub_label'] = disease_1_df['cell_type'].map(subtype_mapping)  # disease == 0 disease_0_df = df[df['disease'] == 0].copy() disease_0_df['sub_label'] = 0  df = pd.concat([disease_1_df, disease_0_df]).sort_index() df['sub_label'] = df['sub_label'].astype('category') df['subtype'] = df['subtype'].astype('category')  tgt.obs = df In\u00a0[15]: Copied! <pre>metrics = ['F1*NMI', 'SGD_degree', 'SGD_cc']\nresult = stands.evaluate(metrics, adata=tgt, y_true=tgt.obs['disease'], y_pred=tgt.obs['pred'],\n                         spaid='spatial', typeid='cell_type', clustid='subtype')\n</pre> metrics = ['F1*NMI', 'SGD_degree', 'SGD_cc'] result = stands.evaluate(metrics, adata=tgt, y_true=tgt.obs['disease'], y_pred=tgt.obs['pred'],                          spaid='spatial', typeid='cell_type', clustid='subtype') In\u00a0[16]: Copied! <pre>pd.DataFrame(zip(metrics, result))\n</pre> pd.DataFrame(zip(metrics, result)) Out[16]: 0 1 0 F1*NMI 0.357314 1 SGD_degree 0.936548 2 SGD_cc 0.510951 <p>We use the spatial map to visualise the results of anomaly detection.</p> In\u00a0[17]: Copied! <pre>ax = sc.pl.spatial(tgt, color=['subtype', 'sub_label'], s=90, show=False, crop_coord=(0, 8700, 800, 7600))\n\nax[0].legend(fontsize=12)\nax[0].set_title('STANDS', fontsize=18)\nax[0].set_xlabel('Saptial 1', fontsize=14)\nax[0].set_ylabel('Saptial 2', fontsize=14)\n\nax[1].legend(fontsize=12)\nax[1].set_title('Ground Truth', fontsize=18)\nax[1].set_xlabel('Saptial 1', fontsize=14)\nax[1].set_ylabel('Saptial 2', fontsize=14)\n\nplt.show()\n</pre> ax = sc.pl.spatial(tgt, color=['subtype', 'sub_label'], s=90, show=False, crop_coord=(0, 8700, 800, 7600))  ax[0].legend(fontsize=12) ax[0].set_title('STANDS', fontsize=18) ax[0].set_xlabel('Saptial 1', fontsize=14) ax[0].set_ylabel('Saptial 2', fontsize=14)  ax[1].legend(fontsize=12) ax[1].set_title('Ground Truth', fontsize=18) ax[1].set_xlabel('Saptial 1', fontsize=14) ax[1].set_ylabel('Saptial 2', fontsize=14)  plt.show() In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"tutorial/SingleAS/#tutorial-5-discern-biologically-distinct-anomalous-tissue-subdomains-in-single-st-datasets","title":"Tutorial 5: Discern biologically distinct anomalous tissue subdomains in single ST datasets\u00b6","text":""},{"location":"tutorial/SingleAS/#loading-package","title":"Loading package\u00b6","text":""},{"location":"tutorial/SingleAS/#reading-st-data","title":"Reading ST data\u00b6","text":""},{"location":"tutorial/SingleAS/#converting-data","title":"Converting data\u00b6","text":""},{"location":"tutorial/SingleAS/#detecting-anomaly-domains","title":"Detecting anomaly domains\u00b6","text":""},{"location":"tutorial/SingleAS/#training-the-model","title":"Training the model\u00b6","text":""},{"location":"tutorial/SingleAS/#evaluation","title":"Evaluation\u00b6","text":""},{"location":"tutorial/SingleAS/#visualization","title":"Visualization\u00b6","text":""},{"location":"tutorial/overview/","title":"Overview","text":"<p>STANDS offers a variety of functionalities, including but not limited to: region anomaly detection on spatial transcriptome slices, multi-sample batch correction, detection of anomalous subdomains, and combinations of these functionalities. Here, we will provide a brief overview of these main features to help you quickly understand STANDS.</p>"},{"location":"tutorial/overview/#preparations-before-tutorials","title":"Preparations before tutorials","text":"<p>Before starting the tutorial, we need to make some preparations, including: installing STANDS and its required Python packages, downloading the datasets required for the tutorial, and so on. The preparations is available at STANDS Preparations. Additionally, when dealing with multimodal data structures involving both images and gene expression matrices, we strongly recommend using a GPU and pretraining STANDS on large-scale public spatial transcriptomics datasets. This ensures faster execution of STANDS and improved performance in modules related to image feature extraction and feature fusion.</p>"},{"location":"tutorial/overview/#outline-of-tutorials","title":"Outline of tutorials","text":"<ul> <li>Tutorial 0: Pretrain STANDS basic extractor</li> <li>Tutorial 1: Identify cancerous domains in single ST dataset</li> <li>Tutorial 2: Identify cancerous domains across multiple ST datasets concurrently</li> <li>Tutorial 3: Align multiple ST datasets sharing identical domain types</li> <li>Tutorial 4: Align multiple ST datasets with non-overlapping domain types</li> <li>Tutorial 5: Discern biologically distinct anomalous tissue subdomains in single ST datasets</li> <li>Tutorial 6: Discern biologically distinct anomalous tissue subdomains across multiple ST datasets</li> </ul>"}]}